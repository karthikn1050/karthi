import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../AppStreamClient";
import { AssociateFleetRequest, AssociateFleetResult } from "../models/models_0";
export interface AssociateFleetCommandInput extends AssociateFleetRequest {
}
export interface AssociateFleetCommandOutput extends AssociateFleetResult, __MetadataBearer {
}
/**
 * <p>Associates the specified fleet with the specified stack.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { AppStreamClient, AssociateFleetCommand } from "@aws-sdk/client-appstream"; // ES Modules import
 * // const { AppStreamClient, AssociateFleetCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
 * const client = new AppStreamClient(config);
 * const command = new AssociateFleetCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @see {@link AssociateFleetCommandInput} for command's `input` shape.
 * @see {@link AssociateFleetCommandOutput} for command's `response` shape.
 * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
 *
 */
export declare class AssociateFleetCommand extends $Command<AssociateFleetCommandInput, AssociateFleetCommandOutput, AppStreamClientResolvedConfig> {
    readonly input: AssociateFleetCommandInput;
    constructor(input: AssociateFleetCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AssociateFleetCommandInput, AssociateFleetCommandOutput>;
    private serialize;
    private deserialize;
}
