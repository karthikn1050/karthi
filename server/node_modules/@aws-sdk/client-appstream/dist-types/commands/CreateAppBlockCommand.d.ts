import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../AppStreamClient";
import { CreateAppBlockRequest, CreateAppBlockResult } from "../models/models_0";
export interface CreateAppBlockCommandInput extends CreateAppBlockRequest {
}
export interface CreateAppBlockCommandOutput extends CreateAppBlockResult, __MetadataBearer {
}
/**
 * <p>Creates an app block.</p>
 *         <p>App blocks are an Amazon AppStream 2.0 resource that stores the details about the
 *             virtual hard disk in an S3 bucket. It also stores the setup script with details about
 *             how to mount the virtual hard disk. The virtual hard disk includes the application
 *             binaries and other files necessary to launch your applications. Multiple applications
 *             can be assigned to a single app block.</p>
 *         <p>This is only supported for Elastic fleets.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { AppStreamClient, CreateAppBlockCommand } from "@aws-sdk/client-appstream"; // ES Modules import
 * // const { AppStreamClient, CreateAppBlockCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
 * const client = new AppStreamClient(config);
 * const command = new CreateAppBlockCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @see {@link CreateAppBlockCommandInput} for command's `input` shape.
 * @see {@link CreateAppBlockCommandOutput} for command's `response` shape.
 * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
 *
 */
export declare class CreateAppBlockCommand extends $Command<CreateAppBlockCommandInput, CreateAppBlockCommandOutput, AppStreamClientResolvedConfig> {
    readonly input: CreateAppBlockCommandInput;
    constructor(input: CreateAppBlockCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppStreamClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateAppBlockCommandInput, CreateAppBlockCommandOutput>;
    private serialize;
    private deserialize;
}
