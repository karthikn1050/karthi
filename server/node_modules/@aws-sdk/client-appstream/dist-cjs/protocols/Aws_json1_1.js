"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializeAws_json1_1StopFleetCommand = exports.serializeAws_json1_1StartImageBuilderCommand = exports.serializeAws_json1_1StartFleetCommand = exports.serializeAws_json1_1ListTagsForResourceCommand = exports.serializeAws_json1_1ListAssociatedStacksCommand = exports.serializeAws_json1_1ListAssociatedFleetsCommand = exports.serializeAws_json1_1ExpireSessionCommand = exports.serializeAws_json1_1EnableUserCommand = exports.serializeAws_json1_1DisassociateFleetCommand = exports.serializeAws_json1_1DisassociateApplicationFleetCommand = exports.serializeAws_json1_1DisableUserCommand = exports.serializeAws_json1_1DescribeUserStackAssociationsCommand = exports.serializeAws_json1_1DescribeUsersCommand = exports.serializeAws_json1_1DescribeUsageReportSubscriptionsCommand = exports.serializeAws_json1_1DescribeStacksCommand = exports.serializeAws_json1_1DescribeSessionsCommand = exports.serializeAws_json1_1DescribeImagesCommand = exports.serializeAws_json1_1DescribeImagePermissionsCommand = exports.serializeAws_json1_1DescribeImageBuildersCommand = exports.serializeAws_json1_1DescribeFleetsCommand = exports.serializeAws_json1_1DescribeDirectoryConfigsCommand = exports.serializeAws_json1_1DescribeApplicationsCommand = exports.serializeAws_json1_1DescribeApplicationFleetAssociationsCommand = exports.serializeAws_json1_1DescribeAppBlocksCommand = exports.serializeAws_json1_1DeleteUserCommand = exports.serializeAws_json1_1DeleteUsageReportSubscriptionCommand = exports.serializeAws_json1_1DeleteStackCommand = exports.serializeAws_json1_1DeleteImagePermissionsCommand = exports.serializeAws_json1_1DeleteImageBuilderCommand = exports.serializeAws_json1_1DeleteImageCommand = exports.serializeAws_json1_1DeleteFleetCommand = exports.serializeAws_json1_1DeleteDirectoryConfigCommand = exports.serializeAws_json1_1DeleteApplicationCommand = exports.serializeAws_json1_1DeleteAppBlockCommand = exports.serializeAws_json1_1CreateUserCommand = exports.serializeAws_json1_1CreateUsageReportSubscriptionCommand = exports.serializeAws_json1_1CreateUpdatedImageCommand = exports.serializeAws_json1_1CreateStreamingURLCommand = exports.serializeAws_json1_1CreateStackCommand = exports.serializeAws_json1_1CreateImageBuilderStreamingURLCommand = exports.serializeAws_json1_1CreateImageBuilderCommand = exports.serializeAws_json1_1CreateFleetCommand = exports.serializeAws_json1_1CreateDirectoryConfigCommand = exports.serializeAws_json1_1CreateApplicationCommand = exports.serializeAws_json1_1CreateAppBlockCommand = exports.serializeAws_json1_1CopyImageCommand = exports.serializeAws_json1_1BatchDisassociateUserStackCommand = exports.serializeAws_json1_1BatchAssociateUserStackCommand = exports.serializeAws_json1_1AssociateFleetCommand = exports.serializeAws_json1_1AssociateApplicationFleetCommand = void 0;
exports.deserializeAws_json1_1DisassociateFleetCommand = exports.deserializeAws_json1_1DisassociateApplicationFleetCommand = exports.deserializeAws_json1_1DisableUserCommand = exports.deserializeAws_json1_1DescribeUserStackAssociationsCommand = exports.deserializeAws_json1_1DescribeUsersCommand = exports.deserializeAws_json1_1DescribeUsageReportSubscriptionsCommand = exports.deserializeAws_json1_1DescribeStacksCommand = exports.deserializeAws_json1_1DescribeSessionsCommand = exports.deserializeAws_json1_1DescribeImagesCommand = exports.deserializeAws_json1_1DescribeImagePermissionsCommand = exports.deserializeAws_json1_1DescribeImageBuildersCommand = exports.deserializeAws_json1_1DescribeFleetsCommand = exports.deserializeAws_json1_1DescribeDirectoryConfigsCommand = exports.deserializeAws_json1_1DescribeApplicationsCommand = exports.deserializeAws_json1_1DescribeApplicationFleetAssociationsCommand = exports.deserializeAws_json1_1DescribeAppBlocksCommand = exports.deserializeAws_json1_1DeleteUserCommand = exports.deserializeAws_json1_1DeleteUsageReportSubscriptionCommand = exports.deserializeAws_json1_1DeleteStackCommand = exports.deserializeAws_json1_1DeleteImagePermissionsCommand = exports.deserializeAws_json1_1DeleteImageBuilderCommand = exports.deserializeAws_json1_1DeleteImageCommand = exports.deserializeAws_json1_1DeleteFleetCommand = exports.deserializeAws_json1_1DeleteDirectoryConfigCommand = exports.deserializeAws_json1_1DeleteApplicationCommand = exports.deserializeAws_json1_1DeleteAppBlockCommand = exports.deserializeAws_json1_1CreateUserCommand = exports.deserializeAws_json1_1CreateUsageReportSubscriptionCommand = exports.deserializeAws_json1_1CreateUpdatedImageCommand = exports.deserializeAws_json1_1CreateStreamingURLCommand = exports.deserializeAws_json1_1CreateStackCommand = exports.deserializeAws_json1_1CreateImageBuilderStreamingURLCommand = exports.deserializeAws_json1_1CreateImageBuilderCommand = exports.deserializeAws_json1_1CreateFleetCommand = exports.deserializeAws_json1_1CreateDirectoryConfigCommand = exports.deserializeAws_json1_1CreateApplicationCommand = exports.deserializeAws_json1_1CreateAppBlockCommand = exports.deserializeAws_json1_1CopyImageCommand = exports.deserializeAws_json1_1BatchDisassociateUserStackCommand = exports.deserializeAws_json1_1BatchAssociateUserStackCommand = exports.deserializeAws_json1_1AssociateFleetCommand = exports.deserializeAws_json1_1AssociateApplicationFleetCommand = exports.serializeAws_json1_1UpdateStackCommand = exports.serializeAws_json1_1UpdateImagePermissionsCommand = exports.serializeAws_json1_1UpdateFleetCommand = exports.serializeAws_json1_1UpdateDirectoryConfigCommand = exports.serializeAws_json1_1UpdateApplicationCommand = exports.serializeAws_json1_1UntagResourceCommand = exports.serializeAws_json1_1TagResourceCommand = exports.serializeAws_json1_1StopImageBuilderCommand = void 0;
exports.deserializeAws_json1_1UpdateStackCommand = exports.deserializeAws_json1_1UpdateImagePermissionsCommand = exports.deserializeAws_json1_1UpdateFleetCommand = exports.deserializeAws_json1_1UpdateDirectoryConfigCommand = exports.deserializeAws_json1_1UpdateApplicationCommand = exports.deserializeAws_json1_1UntagResourceCommand = exports.deserializeAws_json1_1TagResourceCommand = exports.deserializeAws_json1_1StopImageBuilderCommand = exports.deserializeAws_json1_1StopFleetCommand = exports.deserializeAws_json1_1StartImageBuilderCommand = exports.deserializeAws_json1_1StartFleetCommand = exports.deserializeAws_json1_1ListTagsForResourceCommand = exports.deserializeAws_json1_1ListAssociatedStacksCommand = exports.deserializeAws_json1_1ListAssociatedFleetsCommand = exports.deserializeAws_json1_1ExpireSessionCommand = exports.deserializeAws_json1_1EnableUserCommand = void 0;
const protocol_http_1 = require("@aws-sdk/protocol-http");
const smithy_client_1 = require("@aws-sdk/smithy-client");
const serializeAws_json1_1AssociateApplicationFleetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.AssociateApplicationFleet",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1AssociateApplicationFleetRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1AssociateApplicationFleetCommand = serializeAws_json1_1AssociateApplicationFleetCommand;
const serializeAws_json1_1AssociateFleetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.AssociateFleet",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1AssociateFleetRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1AssociateFleetCommand = serializeAws_json1_1AssociateFleetCommand;
const serializeAws_json1_1BatchAssociateUserStackCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.BatchAssociateUserStack",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1BatchAssociateUserStackRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1BatchAssociateUserStackCommand = serializeAws_json1_1BatchAssociateUserStackCommand;
const serializeAws_json1_1BatchDisassociateUserStackCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.BatchDisassociateUserStack",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1BatchDisassociateUserStackRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1BatchDisassociateUserStackCommand = serializeAws_json1_1BatchDisassociateUserStackCommand;
const serializeAws_json1_1CopyImageCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.CopyImage",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CopyImageRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CopyImageCommand = serializeAws_json1_1CopyImageCommand;
const serializeAws_json1_1CreateAppBlockCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.CreateAppBlock",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateAppBlockRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateAppBlockCommand = serializeAws_json1_1CreateAppBlockCommand;
const serializeAws_json1_1CreateApplicationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.CreateApplication",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateApplicationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateApplicationCommand = serializeAws_json1_1CreateApplicationCommand;
const serializeAws_json1_1CreateDirectoryConfigCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.CreateDirectoryConfig",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateDirectoryConfigRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateDirectoryConfigCommand = serializeAws_json1_1CreateDirectoryConfigCommand;
const serializeAws_json1_1CreateFleetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.CreateFleet",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateFleetRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateFleetCommand = serializeAws_json1_1CreateFleetCommand;
const serializeAws_json1_1CreateImageBuilderCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.CreateImageBuilder",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateImageBuilderRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateImageBuilderCommand = serializeAws_json1_1CreateImageBuilderCommand;
const serializeAws_json1_1CreateImageBuilderStreamingURLCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.CreateImageBuilderStreamingURL",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateImageBuilderStreamingURLRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateImageBuilderStreamingURLCommand = serializeAws_json1_1CreateImageBuilderStreamingURLCommand;
const serializeAws_json1_1CreateStackCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.CreateStack",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateStackRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateStackCommand = serializeAws_json1_1CreateStackCommand;
const serializeAws_json1_1CreateStreamingURLCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.CreateStreamingURL",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateStreamingURLRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateStreamingURLCommand = serializeAws_json1_1CreateStreamingURLCommand;
const serializeAws_json1_1CreateUpdatedImageCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.CreateUpdatedImage",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateUpdatedImageRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateUpdatedImageCommand = serializeAws_json1_1CreateUpdatedImageCommand;
const serializeAws_json1_1CreateUsageReportSubscriptionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.CreateUsageReportSubscription",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateUsageReportSubscriptionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateUsageReportSubscriptionCommand = serializeAws_json1_1CreateUsageReportSubscriptionCommand;
const serializeAws_json1_1CreateUserCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.CreateUser",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateUserRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateUserCommand = serializeAws_json1_1CreateUserCommand;
const serializeAws_json1_1DeleteAppBlockCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.DeleteAppBlock",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteAppBlockRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteAppBlockCommand = serializeAws_json1_1DeleteAppBlockCommand;
const serializeAws_json1_1DeleteApplicationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.DeleteApplication",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteApplicationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteApplicationCommand = serializeAws_json1_1DeleteApplicationCommand;
const serializeAws_json1_1DeleteDirectoryConfigCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.DeleteDirectoryConfig",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteDirectoryConfigRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteDirectoryConfigCommand = serializeAws_json1_1DeleteDirectoryConfigCommand;
const serializeAws_json1_1DeleteFleetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.DeleteFleet",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteFleetRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteFleetCommand = serializeAws_json1_1DeleteFleetCommand;
const serializeAws_json1_1DeleteImageCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.DeleteImage",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteImageRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteImageCommand = serializeAws_json1_1DeleteImageCommand;
const serializeAws_json1_1DeleteImageBuilderCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.DeleteImageBuilder",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteImageBuilderRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteImageBuilderCommand = serializeAws_json1_1DeleteImageBuilderCommand;
const serializeAws_json1_1DeleteImagePermissionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.DeleteImagePermissions",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteImagePermissionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteImagePermissionsCommand = serializeAws_json1_1DeleteImagePermissionsCommand;
const serializeAws_json1_1DeleteStackCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.DeleteStack",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteStackRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteStackCommand = serializeAws_json1_1DeleteStackCommand;
const serializeAws_json1_1DeleteUsageReportSubscriptionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.DeleteUsageReportSubscription",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteUsageReportSubscriptionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteUsageReportSubscriptionCommand = serializeAws_json1_1DeleteUsageReportSubscriptionCommand;
const serializeAws_json1_1DeleteUserCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.DeleteUser",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteUserRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteUserCommand = serializeAws_json1_1DeleteUserCommand;
const serializeAws_json1_1DescribeAppBlocksCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.DescribeAppBlocks",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeAppBlocksRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeAppBlocksCommand = serializeAws_json1_1DescribeAppBlocksCommand;
const serializeAws_json1_1DescribeApplicationFleetAssociationsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.DescribeApplicationFleetAssociations",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeApplicationFleetAssociationsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeApplicationFleetAssociationsCommand = serializeAws_json1_1DescribeApplicationFleetAssociationsCommand;
const serializeAws_json1_1DescribeApplicationsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.DescribeApplications",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeApplicationsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeApplicationsCommand = serializeAws_json1_1DescribeApplicationsCommand;
const serializeAws_json1_1DescribeDirectoryConfigsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.DescribeDirectoryConfigs",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeDirectoryConfigsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeDirectoryConfigsCommand = serializeAws_json1_1DescribeDirectoryConfigsCommand;
const serializeAws_json1_1DescribeFleetsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.DescribeFleets",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeFleetsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeFleetsCommand = serializeAws_json1_1DescribeFleetsCommand;
const serializeAws_json1_1DescribeImageBuildersCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.DescribeImageBuilders",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeImageBuildersRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeImageBuildersCommand = serializeAws_json1_1DescribeImageBuildersCommand;
const serializeAws_json1_1DescribeImagePermissionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.DescribeImagePermissions",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeImagePermissionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeImagePermissionsCommand = serializeAws_json1_1DescribeImagePermissionsCommand;
const serializeAws_json1_1DescribeImagesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.DescribeImages",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeImagesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeImagesCommand = serializeAws_json1_1DescribeImagesCommand;
const serializeAws_json1_1DescribeSessionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.DescribeSessions",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeSessionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeSessionsCommand = serializeAws_json1_1DescribeSessionsCommand;
const serializeAws_json1_1DescribeStacksCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.DescribeStacks",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeStacksRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeStacksCommand = serializeAws_json1_1DescribeStacksCommand;
const serializeAws_json1_1DescribeUsageReportSubscriptionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.DescribeUsageReportSubscriptions",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeUsageReportSubscriptionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeUsageReportSubscriptionsCommand = serializeAws_json1_1DescribeUsageReportSubscriptionsCommand;
const serializeAws_json1_1DescribeUsersCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.DescribeUsers",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeUsersRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeUsersCommand = serializeAws_json1_1DescribeUsersCommand;
const serializeAws_json1_1DescribeUserStackAssociationsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.DescribeUserStackAssociations",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeUserStackAssociationsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeUserStackAssociationsCommand = serializeAws_json1_1DescribeUserStackAssociationsCommand;
const serializeAws_json1_1DisableUserCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.DisableUser",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DisableUserRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DisableUserCommand = serializeAws_json1_1DisableUserCommand;
const serializeAws_json1_1DisassociateApplicationFleetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.DisassociateApplicationFleet",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DisassociateApplicationFleetRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DisassociateApplicationFleetCommand = serializeAws_json1_1DisassociateApplicationFleetCommand;
const serializeAws_json1_1DisassociateFleetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.DisassociateFleet",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DisassociateFleetRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DisassociateFleetCommand = serializeAws_json1_1DisassociateFleetCommand;
const serializeAws_json1_1EnableUserCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.EnableUser",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1EnableUserRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1EnableUserCommand = serializeAws_json1_1EnableUserCommand;
const serializeAws_json1_1ExpireSessionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.ExpireSession",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ExpireSessionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ExpireSessionCommand = serializeAws_json1_1ExpireSessionCommand;
const serializeAws_json1_1ListAssociatedFleetsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.ListAssociatedFleets",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListAssociatedFleetsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListAssociatedFleetsCommand = serializeAws_json1_1ListAssociatedFleetsCommand;
const serializeAws_json1_1ListAssociatedStacksCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.ListAssociatedStacks",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListAssociatedStacksRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListAssociatedStacksCommand = serializeAws_json1_1ListAssociatedStacksCommand;
const serializeAws_json1_1ListTagsForResourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.ListTagsForResource",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListTagsForResourceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListTagsForResourceCommand = serializeAws_json1_1ListTagsForResourceCommand;
const serializeAws_json1_1StartFleetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.StartFleet",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StartFleetRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1StartFleetCommand = serializeAws_json1_1StartFleetCommand;
const serializeAws_json1_1StartImageBuilderCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.StartImageBuilder",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StartImageBuilderRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1StartImageBuilderCommand = serializeAws_json1_1StartImageBuilderCommand;
const serializeAws_json1_1StopFleetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.StopFleet",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StopFleetRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1StopFleetCommand = serializeAws_json1_1StopFleetCommand;
const serializeAws_json1_1StopImageBuilderCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.StopImageBuilder",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StopImageBuilderRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1StopImageBuilderCommand = serializeAws_json1_1StopImageBuilderCommand;
const serializeAws_json1_1TagResourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.TagResource",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1TagResourceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1TagResourceCommand = serializeAws_json1_1TagResourceCommand;
const serializeAws_json1_1UntagResourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.UntagResource",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UntagResourceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UntagResourceCommand = serializeAws_json1_1UntagResourceCommand;
const serializeAws_json1_1UpdateApplicationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.UpdateApplication",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateApplicationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UpdateApplicationCommand = serializeAws_json1_1UpdateApplicationCommand;
const serializeAws_json1_1UpdateDirectoryConfigCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.UpdateDirectoryConfig",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateDirectoryConfigRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UpdateDirectoryConfigCommand = serializeAws_json1_1UpdateDirectoryConfigCommand;
const serializeAws_json1_1UpdateFleetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.UpdateFleet",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateFleetRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UpdateFleetCommand = serializeAws_json1_1UpdateFleetCommand;
const serializeAws_json1_1UpdateImagePermissionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.UpdateImagePermissions",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateImagePermissionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UpdateImagePermissionsCommand = serializeAws_json1_1UpdateImagePermissionsCommand;
const serializeAws_json1_1UpdateStackCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "PhotonAdminProxyService.UpdateStack",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateStackRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UpdateStackCommand = serializeAws_json1_1UpdateStackCommand;
const deserializeAws_json1_1AssociateApplicationFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1AssociateApplicationFleetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1AssociateApplicationFleetResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1AssociateApplicationFleetCommand = deserializeAws_json1_1AssociateApplicationFleetCommand;
const deserializeAws_json1_1AssociateApplicationFleetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.appstream#ConcurrentModificationException":
            response = {
                ...(await deserializeAws_json1_1ConcurrentModificationExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InvalidParameterCombinationException":
        case "com.amazonaws.appstream#InvalidParameterCombinationException":
            response = {
                ...(await deserializeAws_json1_1InvalidParameterCombinationExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "LimitExceededException":
        case "com.amazonaws.appstream#LimitExceededException":
            response = {
                ...(await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "OperationNotPermittedException":
        case "com.amazonaws.appstream#OperationNotPermittedException":
            response = {
                ...(await deserializeAws_json1_1OperationNotPermittedExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1AssociateFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1AssociateFleetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1AssociateFleetResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1AssociateFleetCommand = deserializeAws_json1_1AssociateFleetCommand;
const deserializeAws_json1_1AssociateFleetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.appstream#ConcurrentModificationException":
            response = {
                ...(await deserializeAws_json1_1ConcurrentModificationExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "IncompatibleImageException":
        case "com.amazonaws.appstream#IncompatibleImageException":
            response = {
                ...(await deserializeAws_json1_1IncompatibleImageExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InvalidAccountStatusException":
        case "com.amazonaws.appstream#InvalidAccountStatusException":
            response = {
                ...(await deserializeAws_json1_1InvalidAccountStatusExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "LimitExceededException":
        case "com.amazonaws.appstream#LimitExceededException":
            response = {
                ...(await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "OperationNotPermittedException":
        case "com.amazonaws.appstream#OperationNotPermittedException":
            response = {
                ...(await deserializeAws_json1_1OperationNotPermittedExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1BatchAssociateUserStackCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1BatchAssociateUserStackCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1BatchAssociateUserStackResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1BatchAssociateUserStackCommand = deserializeAws_json1_1BatchAssociateUserStackCommand;
const deserializeAws_json1_1BatchAssociateUserStackCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterCombinationException":
        case "com.amazonaws.appstream#InvalidParameterCombinationException":
            response = {
                ...(await deserializeAws_json1_1InvalidParameterCombinationExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "OperationNotPermittedException":
        case "com.amazonaws.appstream#OperationNotPermittedException":
            response = {
                ...(await deserializeAws_json1_1OperationNotPermittedExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1BatchDisassociateUserStackCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1BatchDisassociateUserStackCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1BatchDisassociateUserStackResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1BatchDisassociateUserStackCommand = deserializeAws_json1_1BatchDisassociateUserStackCommand;
const deserializeAws_json1_1BatchDisassociateUserStackCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterCombinationException":
        case "com.amazonaws.appstream#InvalidParameterCombinationException":
            response = {
                ...(await deserializeAws_json1_1InvalidParameterCombinationExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "OperationNotPermittedException":
        case "com.amazonaws.appstream#OperationNotPermittedException":
            response = {
                ...(await deserializeAws_json1_1OperationNotPermittedExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CopyImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CopyImageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CopyImageResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CopyImageCommand = deserializeAws_json1_1CopyImageCommand;
const deserializeAws_json1_1CopyImageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "IncompatibleImageException":
        case "com.amazonaws.appstream#IncompatibleImageException":
            response = {
                ...(await deserializeAws_json1_1IncompatibleImageExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InvalidAccountStatusException":
        case "com.amazonaws.appstream#InvalidAccountStatusException":
            response = {
                ...(await deserializeAws_json1_1InvalidAccountStatusExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "LimitExceededException":
        case "com.amazonaws.appstream#LimitExceededException":
            response = {
                ...(await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceAlreadyExistsException":
        case "com.amazonaws.appstream#ResourceAlreadyExistsException":
            response = {
                ...(await deserializeAws_json1_1ResourceAlreadyExistsExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotAvailableException":
        case "com.amazonaws.appstream#ResourceNotAvailableException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotAvailableExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateAppBlockCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateAppBlockCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateAppBlockResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateAppBlockCommand = deserializeAws_json1_1CreateAppBlockCommand;
const deserializeAws_json1_1CreateAppBlockCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.appstream#ConcurrentModificationException":
            response = {
                ...(await deserializeAws_json1_1ConcurrentModificationExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "LimitExceededException":
        case "com.amazonaws.appstream#LimitExceededException":
            response = {
                ...(await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "OperationNotPermittedException":
        case "com.amazonaws.appstream#OperationNotPermittedException":
            response = {
                ...(await deserializeAws_json1_1OperationNotPermittedExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceAlreadyExistsException":
        case "com.amazonaws.appstream#ResourceAlreadyExistsException":
            response = {
                ...(await deserializeAws_json1_1ResourceAlreadyExistsExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateApplicationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateApplicationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateApplicationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateApplicationCommand = deserializeAws_json1_1CreateApplicationCommand;
const deserializeAws_json1_1CreateApplicationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.appstream#ConcurrentModificationException":
            response = {
                ...(await deserializeAws_json1_1ConcurrentModificationExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "LimitExceededException":
        case "com.amazonaws.appstream#LimitExceededException":
            response = {
                ...(await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "OperationNotPermittedException":
        case "com.amazonaws.appstream#OperationNotPermittedException":
            response = {
                ...(await deserializeAws_json1_1OperationNotPermittedExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceAlreadyExistsException":
        case "com.amazonaws.appstream#ResourceAlreadyExistsException":
            response = {
                ...(await deserializeAws_json1_1ResourceAlreadyExistsExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateDirectoryConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateDirectoryConfigCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateDirectoryConfigResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateDirectoryConfigCommand = deserializeAws_json1_1CreateDirectoryConfigCommand;
const deserializeAws_json1_1CreateDirectoryConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidAccountStatusException":
        case "com.amazonaws.appstream#InvalidAccountStatusException":
            response = {
                ...(await deserializeAws_json1_1InvalidAccountStatusExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InvalidRoleException":
        case "com.amazonaws.appstream#InvalidRoleException":
            response = {
                ...(await deserializeAws_json1_1InvalidRoleExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "LimitExceededException":
        case "com.amazonaws.appstream#LimitExceededException":
            response = {
                ...(await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "OperationNotPermittedException":
        case "com.amazonaws.appstream#OperationNotPermittedException":
            response = {
                ...(await deserializeAws_json1_1OperationNotPermittedExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceAlreadyExistsException":
        case "com.amazonaws.appstream#ResourceAlreadyExistsException":
            response = {
                ...(await deserializeAws_json1_1ResourceAlreadyExistsExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateFleetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateFleetResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateFleetCommand = deserializeAws_json1_1CreateFleetCommand;
const deserializeAws_json1_1CreateFleetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.appstream#ConcurrentModificationException":
            response = {
                ...(await deserializeAws_json1_1ConcurrentModificationExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "IncompatibleImageException":
        case "com.amazonaws.appstream#IncompatibleImageException":
            response = {
                ...(await deserializeAws_json1_1IncompatibleImageExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InvalidAccountStatusException":
        case "com.amazonaws.appstream#InvalidAccountStatusException":
            response = {
                ...(await deserializeAws_json1_1InvalidAccountStatusExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InvalidParameterCombinationException":
        case "com.amazonaws.appstream#InvalidParameterCombinationException":
            response = {
                ...(await deserializeAws_json1_1InvalidParameterCombinationExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InvalidRoleException":
        case "com.amazonaws.appstream#InvalidRoleException":
            response = {
                ...(await deserializeAws_json1_1InvalidRoleExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "LimitExceededException":
        case "com.amazonaws.appstream#LimitExceededException":
            response = {
                ...(await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "OperationNotPermittedException":
        case "com.amazonaws.appstream#OperationNotPermittedException":
            response = {
                ...(await deserializeAws_json1_1OperationNotPermittedExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "RequestLimitExceededException":
        case "com.amazonaws.appstream#RequestLimitExceededException":
            response = {
                ...(await deserializeAws_json1_1RequestLimitExceededExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceAlreadyExistsException":
        case "com.amazonaws.appstream#ResourceAlreadyExistsException":
            response = {
                ...(await deserializeAws_json1_1ResourceAlreadyExistsExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotAvailableException":
        case "com.amazonaws.appstream#ResourceNotAvailableException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotAvailableExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateImageBuilderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateImageBuilderCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateImageBuilderResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateImageBuilderCommand = deserializeAws_json1_1CreateImageBuilderCommand;
const deserializeAws_json1_1CreateImageBuilderCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.appstream#ConcurrentModificationException":
            response = {
                ...(await deserializeAws_json1_1ConcurrentModificationExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "IncompatibleImageException":
        case "com.amazonaws.appstream#IncompatibleImageException":
            response = {
                ...(await deserializeAws_json1_1IncompatibleImageExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InvalidAccountStatusException":
        case "com.amazonaws.appstream#InvalidAccountStatusException":
            response = {
                ...(await deserializeAws_json1_1InvalidAccountStatusExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InvalidParameterCombinationException":
        case "com.amazonaws.appstream#InvalidParameterCombinationException":
            response = {
                ...(await deserializeAws_json1_1InvalidParameterCombinationExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InvalidRoleException":
        case "com.amazonaws.appstream#InvalidRoleException":
            response = {
                ...(await deserializeAws_json1_1InvalidRoleExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "LimitExceededException":
        case "com.amazonaws.appstream#LimitExceededException":
            response = {
                ...(await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "OperationNotPermittedException":
        case "com.amazonaws.appstream#OperationNotPermittedException":
            response = {
                ...(await deserializeAws_json1_1OperationNotPermittedExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "RequestLimitExceededException":
        case "com.amazonaws.appstream#RequestLimitExceededException":
            response = {
                ...(await deserializeAws_json1_1RequestLimitExceededExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceAlreadyExistsException":
        case "com.amazonaws.appstream#ResourceAlreadyExistsException":
            response = {
                ...(await deserializeAws_json1_1ResourceAlreadyExistsExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotAvailableException":
        case "com.amazonaws.appstream#ResourceNotAvailableException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotAvailableExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateImageBuilderStreamingURLCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateImageBuilderStreamingURLCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateImageBuilderStreamingURLResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateImageBuilderStreamingURLCommand = deserializeAws_json1_1CreateImageBuilderStreamingURLCommand;
const deserializeAws_json1_1CreateImageBuilderStreamingURLCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "OperationNotPermittedException":
        case "com.amazonaws.appstream#OperationNotPermittedException":
            response = {
                ...(await deserializeAws_json1_1OperationNotPermittedExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateStackCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateStackCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateStackResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateStackCommand = deserializeAws_json1_1CreateStackCommand;
const deserializeAws_json1_1CreateStackCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.appstream#ConcurrentModificationException":
            response = {
                ...(await deserializeAws_json1_1ConcurrentModificationExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InvalidAccountStatusException":
        case "com.amazonaws.appstream#InvalidAccountStatusException":
            response = {
                ...(await deserializeAws_json1_1InvalidAccountStatusExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InvalidParameterCombinationException":
        case "com.amazonaws.appstream#InvalidParameterCombinationException":
            response = {
                ...(await deserializeAws_json1_1InvalidParameterCombinationExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InvalidRoleException":
        case "com.amazonaws.appstream#InvalidRoleException":
            response = {
                ...(await deserializeAws_json1_1InvalidRoleExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "LimitExceededException":
        case "com.amazonaws.appstream#LimitExceededException":
            response = {
                ...(await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceAlreadyExistsException":
        case "com.amazonaws.appstream#ResourceAlreadyExistsException":
            response = {
                ...(await deserializeAws_json1_1ResourceAlreadyExistsExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateStreamingURLCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateStreamingURLCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateStreamingURLResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateStreamingURLCommand = deserializeAws_json1_1CreateStreamingURLCommand;
const deserializeAws_json1_1CreateStreamingURLCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterCombinationException":
        case "com.amazonaws.appstream#InvalidParameterCombinationException":
            response = {
                ...(await deserializeAws_json1_1InvalidParameterCombinationExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "OperationNotPermittedException":
        case "com.amazonaws.appstream#OperationNotPermittedException":
            response = {
                ...(await deserializeAws_json1_1OperationNotPermittedExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotAvailableException":
        case "com.amazonaws.appstream#ResourceNotAvailableException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotAvailableExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateUpdatedImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateUpdatedImageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateUpdatedImageResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateUpdatedImageCommand = deserializeAws_json1_1CreateUpdatedImageCommand;
const deserializeAws_json1_1CreateUpdatedImageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.appstream#ConcurrentModificationException":
            response = {
                ...(await deserializeAws_json1_1ConcurrentModificationExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "IncompatibleImageException":
        case "com.amazonaws.appstream#IncompatibleImageException":
            response = {
                ...(await deserializeAws_json1_1IncompatibleImageExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InvalidAccountStatusException":
        case "com.amazonaws.appstream#InvalidAccountStatusException":
            response = {
                ...(await deserializeAws_json1_1InvalidAccountStatusExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "LimitExceededException":
        case "com.amazonaws.appstream#LimitExceededException":
            response = {
                ...(await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "OperationNotPermittedException":
        case "com.amazonaws.appstream#OperationNotPermittedException":
            response = {
                ...(await deserializeAws_json1_1OperationNotPermittedExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceAlreadyExistsException":
        case "com.amazonaws.appstream#ResourceAlreadyExistsException":
            response = {
                ...(await deserializeAws_json1_1ResourceAlreadyExistsExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateUsageReportSubscriptionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateUsageReportSubscriptionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateUsageReportSubscriptionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateUsageReportSubscriptionCommand = deserializeAws_json1_1CreateUsageReportSubscriptionCommand;
const deserializeAws_json1_1CreateUsageReportSubscriptionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidAccountStatusException":
        case "com.amazonaws.appstream#InvalidAccountStatusException":
            response = {
                ...(await deserializeAws_json1_1InvalidAccountStatusExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InvalidRoleException":
        case "com.amazonaws.appstream#InvalidRoleException":
            response = {
                ...(await deserializeAws_json1_1InvalidRoleExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "LimitExceededException":
        case "com.amazonaws.appstream#LimitExceededException":
            response = {
                ...(await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateUserCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateUserCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateUserResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateUserCommand = deserializeAws_json1_1CreateUserCommand;
const deserializeAws_json1_1CreateUserCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidAccountStatusException":
        case "com.amazonaws.appstream#InvalidAccountStatusException":
            response = {
                ...(await deserializeAws_json1_1InvalidAccountStatusExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InvalidParameterCombinationException":
        case "com.amazonaws.appstream#InvalidParameterCombinationException":
            response = {
                ...(await deserializeAws_json1_1InvalidParameterCombinationExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "LimitExceededException":
        case "com.amazonaws.appstream#LimitExceededException":
            response = {
                ...(await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "OperationNotPermittedException":
        case "com.amazonaws.appstream#OperationNotPermittedException":
            response = {
                ...(await deserializeAws_json1_1OperationNotPermittedExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceAlreadyExistsException":
        case "com.amazonaws.appstream#ResourceAlreadyExistsException":
            response = {
                ...(await deserializeAws_json1_1ResourceAlreadyExistsExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteAppBlockCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteAppBlockCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteAppBlockResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteAppBlockCommand = deserializeAws_json1_1DeleteAppBlockCommand;
const deserializeAws_json1_1DeleteAppBlockCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.appstream#ConcurrentModificationException":
            response = {
                ...(await deserializeAws_json1_1ConcurrentModificationExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceInUseException":
        case "com.amazonaws.appstream#ResourceInUseException":
            response = {
                ...(await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteApplicationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteApplicationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteApplicationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteApplicationCommand = deserializeAws_json1_1DeleteApplicationCommand;
const deserializeAws_json1_1DeleteApplicationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.appstream#ConcurrentModificationException":
            response = {
                ...(await deserializeAws_json1_1ConcurrentModificationExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "OperationNotPermittedException":
        case "com.amazonaws.appstream#OperationNotPermittedException":
            response = {
                ...(await deserializeAws_json1_1OperationNotPermittedExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceInUseException":
        case "com.amazonaws.appstream#ResourceInUseException":
            response = {
                ...(await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteDirectoryConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteDirectoryConfigCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteDirectoryConfigResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteDirectoryConfigCommand = deserializeAws_json1_1DeleteDirectoryConfigCommand;
const deserializeAws_json1_1DeleteDirectoryConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUseException":
        case "com.amazonaws.appstream#ResourceInUseException":
            response = {
                ...(await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteFleetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteFleetResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteFleetCommand = deserializeAws_json1_1DeleteFleetCommand;
const deserializeAws_json1_1DeleteFleetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.appstream#ConcurrentModificationException":
            response = {
                ...(await deserializeAws_json1_1ConcurrentModificationExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceInUseException":
        case "com.amazonaws.appstream#ResourceInUseException":
            response = {
                ...(await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteImageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteImageResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteImageCommand = deserializeAws_json1_1DeleteImageCommand;
const deserializeAws_json1_1DeleteImageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.appstream#ConcurrentModificationException":
            response = {
                ...(await deserializeAws_json1_1ConcurrentModificationExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "OperationNotPermittedException":
        case "com.amazonaws.appstream#OperationNotPermittedException":
            response = {
                ...(await deserializeAws_json1_1OperationNotPermittedExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceInUseException":
        case "com.amazonaws.appstream#ResourceInUseException":
            response = {
                ...(await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteImageBuilderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteImageBuilderCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteImageBuilderResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteImageBuilderCommand = deserializeAws_json1_1DeleteImageBuilderCommand;
const deserializeAws_json1_1DeleteImageBuilderCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.appstream#ConcurrentModificationException":
            response = {
                ...(await deserializeAws_json1_1ConcurrentModificationExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "OperationNotPermittedException":
        case "com.amazonaws.appstream#OperationNotPermittedException":
            response = {
                ...(await deserializeAws_json1_1OperationNotPermittedExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteImagePermissionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteImagePermissionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteImagePermissionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteImagePermissionsCommand = deserializeAws_json1_1DeleteImagePermissionsCommand;
const deserializeAws_json1_1DeleteImagePermissionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotAvailableException":
        case "com.amazonaws.appstream#ResourceNotAvailableException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotAvailableExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteStackCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteStackCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteStackResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteStackCommand = deserializeAws_json1_1DeleteStackCommand;
const deserializeAws_json1_1DeleteStackCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.appstream#ConcurrentModificationException":
            response = {
                ...(await deserializeAws_json1_1ConcurrentModificationExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceInUseException":
        case "com.amazonaws.appstream#ResourceInUseException":
            response = {
                ...(await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteUsageReportSubscriptionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteUsageReportSubscriptionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteUsageReportSubscriptionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteUsageReportSubscriptionCommand = deserializeAws_json1_1DeleteUsageReportSubscriptionCommand;
const deserializeAws_json1_1DeleteUsageReportSubscriptionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidAccountStatusException":
        case "com.amazonaws.appstream#InvalidAccountStatusException":
            response = {
                ...(await deserializeAws_json1_1InvalidAccountStatusExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteUserCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteUserCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteUserResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteUserCommand = deserializeAws_json1_1DeleteUserCommand;
const deserializeAws_json1_1DeleteUserCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeAppBlocksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeAppBlocksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeAppBlocksResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeAppBlocksCommand = deserializeAws_json1_1DescribeAppBlocksCommand;
const deserializeAws_json1_1DescribeAppBlocksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "OperationNotPermittedException":
        case "com.amazonaws.appstream#OperationNotPermittedException":
            response = {
                ...(await deserializeAws_json1_1OperationNotPermittedExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeApplicationFleetAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeApplicationFleetAssociationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeApplicationFleetAssociationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeApplicationFleetAssociationsCommand = deserializeAws_json1_1DescribeApplicationFleetAssociationsCommand;
const deserializeAws_json1_1DescribeApplicationFleetAssociationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterCombinationException":
        case "com.amazonaws.appstream#InvalidParameterCombinationException":
            response = {
                ...(await deserializeAws_json1_1InvalidParameterCombinationExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "OperationNotPermittedException":
        case "com.amazonaws.appstream#OperationNotPermittedException":
            response = {
                ...(await deserializeAws_json1_1OperationNotPermittedExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeApplicationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeApplicationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeApplicationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeApplicationsCommand = deserializeAws_json1_1DescribeApplicationsCommand;
const deserializeAws_json1_1DescribeApplicationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "OperationNotPermittedException":
        case "com.amazonaws.appstream#OperationNotPermittedException":
            response = {
                ...(await deserializeAws_json1_1OperationNotPermittedExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeDirectoryConfigsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeDirectoryConfigsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeDirectoryConfigsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeDirectoryConfigsCommand = deserializeAws_json1_1DescribeDirectoryConfigsCommand;
const deserializeAws_json1_1DescribeDirectoryConfigsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeFleetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeFleetsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeFleetsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeFleetsCommand = deserializeAws_json1_1DescribeFleetsCommand;
const deserializeAws_json1_1DescribeFleetsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeImageBuildersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeImageBuildersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeImageBuildersResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeImageBuildersCommand = deserializeAws_json1_1DescribeImageBuildersCommand;
const deserializeAws_json1_1DescribeImageBuildersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeImagePermissionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeImagePermissionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeImagePermissionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeImagePermissionsCommand = deserializeAws_json1_1DescribeImagePermissionsCommand;
const deserializeAws_json1_1DescribeImagePermissionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeImagesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeImagesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeImagesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeImagesCommand = deserializeAws_json1_1DescribeImagesCommand;
const deserializeAws_json1_1DescribeImagesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterCombinationException":
        case "com.amazonaws.appstream#InvalidParameterCombinationException":
            response = {
                ...(await deserializeAws_json1_1InvalidParameterCombinationExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeSessionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeSessionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeSessionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeSessionsCommand = deserializeAws_json1_1DescribeSessionsCommand;
const deserializeAws_json1_1DescribeSessionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterCombinationException":
        case "com.amazonaws.appstream#InvalidParameterCombinationException":
            response = {
                ...(await deserializeAws_json1_1InvalidParameterCombinationExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeStacksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeStacksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeStacksResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeStacksCommand = deserializeAws_json1_1DescribeStacksCommand;
const deserializeAws_json1_1DescribeStacksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeUsageReportSubscriptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeUsageReportSubscriptionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeUsageReportSubscriptionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeUsageReportSubscriptionsCommand = deserializeAws_json1_1DescribeUsageReportSubscriptionsCommand;
const deserializeAws_json1_1DescribeUsageReportSubscriptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidAccountStatusException":
        case "com.amazonaws.appstream#InvalidAccountStatusException":
            response = {
                ...(await deserializeAws_json1_1InvalidAccountStatusExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeUsersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeUsersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeUsersResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeUsersCommand = deserializeAws_json1_1DescribeUsersCommand;
const deserializeAws_json1_1DescribeUsersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterCombinationException":
        case "com.amazonaws.appstream#InvalidParameterCombinationException":
            response = {
                ...(await deserializeAws_json1_1InvalidParameterCombinationExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "OperationNotPermittedException":
        case "com.amazonaws.appstream#OperationNotPermittedException":
            response = {
                ...(await deserializeAws_json1_1OperationNotPermittedExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeUserStackAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeUserStackAssociationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeUserStackAssociationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeUserStackAssociationsCommand = deserializeAws_json1_1DescribeUserStackAssociationsCommand;
const deserializeAws_json1_1DescribeUserStackAssociationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterCombinationException":
        case "com.amazonaws.appstream#InvalidParameterCombinationException":
            response = {
                ...(await deserializeAws_json1_1InvalidParameterCombinationExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "OperationNotPermittedException":
        case "com.amazonaws.appstream#OperationNotPermittedException":
            response = {
                ...(await deserializeAws_json1_1OperationNotPermittedExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DisableUserCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DisableUserCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DisableUserResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DisableUserCommand = deserializeAws_json1_1DisableUserCommand;
const deserializeAws_json1_1DisableUserCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DisassociateApplicationFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DisassociateApplicationFleetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DisassociateApplicationFleetResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DisassociateApplicationFleetCommand = deserializeAws_json1_1DisassociateApplicationFleetCommand;
const deserializeAws_json1_1DisassociateApplicationFleetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.appstream#ConcurrentModificationException":
            response = {
                ...(await deserializeAws_json1_1ConcurrentModificationExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InvalidParameterCombinationException":
        case "com.amazonaws.appstream#InvalidParameterCombinationException":
            response = {
                ...(await deserializeAws_json1_1InvalidParameterCombinationExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "OperationNotPermittedException":
        case "com.amazonaws.appstream#OperationNotPermittedException":
            response = {
                ...(await deserializeAws_json1_1OperationNotPermittedExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DisassociateFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DisassociateFleetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DisassociateFleetResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DisassociateFleetCommand = deserializeAws_json1_1DisassociateFleetCommand;
const deserializeAws_json1_1DisassociateFleetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.appstream#ConcurrentModificationException":
            response = {
                ...(await deserializeAws_json1_1ConcurrentModificationExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "OperationNotPermittedException":
        case "com.amazonaws.appstream#OperationNotPermittedException":
            response = {
                ...(await deserializeAws_json1_1OperationNotPermittedExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceInUseException":
        case "com.amazonaws.appstream#ResourceInUseException":
            response = {
                ...(await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1EnableUserCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1EnableUserCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1EnableUserResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1EnableUserCommand = deserializeAws_json1_1EnableUserCommand;
const deserializeAws_json1_1EnableUserCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidAccountStatusException":
        case "com.amazonaws.appstream#InvalidAccountStatusException":
            response = {
                ...(await deserializeAws_json1_1InvalidAccountStatusExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ExpireSessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ExpireSessionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ExpireSessionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ExpireSessionCommand = deserializeAws_json1_1ExpireSessionCommand;
const deserializeAws_json1_1ExpireSessionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListAssociatedFleetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListAssociatedFleetsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListAssociatedFleetsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListAssociatedFleetsCommand = deserializeAws_json1_1ListAssociatedFleetsCommand;
const deserializeAws_json1_1ListAssociatedFleetsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListAssociatedStacksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListAssociatedStacksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListAssociatedStacksResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListAssociatedStacksCommand = deserializeAws_json1_1ListAssociatedStacksCommand;
const deserializeAws_json1_1ListAssociatedStacksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListTagsForResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListTagsForResourceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListTagsForResourceCommand = deserializeAws_json1_1ListTagsForResourceCommand;
const deserializeAws_json1_1ListTagsForResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1StartFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StartFleetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1StartFleetResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1StartFleetCommand = deserializeAws_json1_1StartFleetCommand;
const deserializeAws_json1_1StartFleetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.appstream#ConcurrentModificationException":
            response = {
                ...(await deserializeAws_json1_1ConcurrentModificationExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InvalidAccountStatusException":
        case "com.amazonaws.appstream#InvalidAccountStatusException":
            response = {
                ...(await deserializeAws_json1_1InvalidAccountStatusExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InvalidRoleException":
        case "com.amazonaws.appstream#InvalidRoleException":
            response = {
                ...(await deserializeAws_json1_1InvalidRoleExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "LimitExceededException":
        case "com.amazonaws.appstream#LimitExceededException":
            response = {
                ...(await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "OperationNotPermittedException":
        case "com.amazonaws.appstream#OperationNotPermittedException":
            response = {
                ...(await deserializeAws_json1_1OperationNotPermittedExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "RequestLimitExceededException":
        case "com.amazonaws.appstream#RequestLimitExceededException":
            response = {
                ...(await deserializeAws_json1_1RequestLimitExceededExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotAvailableException":
        case "com.amazonaws.appstream#ResourceNotAvailableException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotAvailableExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1StartImageBuilderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StartImageBuilderCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1StartImageBuilderResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1StartImageBuilderCommand = deserializeAws_json1_1StartImageBuilderCommand;
const deserializeAws_json1_1StartImageBuilderCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.appstream#ConcurrentModificationException":
            response = {
                ...(await deserializeAws_json1_1ConcurrentModificationExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "IncompatibleImageException":
        case "com.amazonaws.appstream#IncompatibleImageException":
            response = {
                ...(await deserializeAws_json1_1IncompatibleImageExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InvalidAccountStatusException":
        case "com.amazonaws.appstream#InvalidAccountStatusException":
            response = {
                ...(await deserializeAws_json1_1InvalidAccountStatusExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotAvailableException":
        case "com.amazonaws.appstream#ResourceNotAvailableException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotAvailableExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1StopFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StopFleetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1StopFleetResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1StopFleetCommand = deserializeAws_json1_1StopFleetCommand;
const deserializeAws_json1_1StopFleetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.appstream#ConcurrentModificationException":
            response = {
                ...(await deserializeAws_json1_1ConcurrentModificationExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1StopImageBuilderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StopImageBuilderCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1StopImageBuilderResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1StopImageBuilderCommand = deserializeAws_json1_1StopImageBuilderCommand;
const deserializeAws_json1_1StopImageBuilderCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.appstream#ConcurrentModificationException":
            response = {
                ...(await deserializeAws_json1_1ConcurrentModificationExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "OperationNotPermittedException":
        case "com.amazonaws.appstream#OperationNotPermittedException":
            response = {
                ...(await deserializeAws_json1_1OperationNotPermittedExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1TagResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1TagResourceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1TagResourceCommand = deserializeAws_json1_1TagResourceCommand;
const deserializeAws_json1_1TagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidAccountStatusException":
        case "com.amazonaws.appstream#InvalidAccountStatusException":
            response = {
                ...(await deserializeAws_json1_1InvalidAccountStatusExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "LimitExceededException":
        case "com.amazonaws.appstream#LimitExceededException":
            response = {
                ...(await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UntagResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UntagResourceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UntagResourceCommand = deserializeAws_json1_1UntagResourceCommand;
const deserializeAws_json1_1UntagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1UpdateApplicationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateApplicationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateApplicationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UpdateApplicationCommand = deserializeAws_json1_1UpdateApplicationCommand;
const deserializeAws_json1_1UpdateApplicationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.appstream#ConcurrentModificationException":
            response = {
                ...(await deserializeAws_json1_1ConcurrentModificationExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "OperationNotPermittedException":
        case "com.amazonaws.appstream#OperationNotPermittedException":
            response = {
                ...(await deserializeAws_json1_1OperationNotPermittedExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1UpdateDirectoryConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateDirectoryConfigCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateDirectoryConfigResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UpdateDirectoryConfigCommand = deserializeAws_json1_1UpdateDirectoryConfigCommand;
const deserializeAws_json1_1UpdateDirectoryConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.appstream#ConcurrentModificationException":
            response = {
                ...(await deserializeAws_json1_1ConcurrentModificationExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InvalidRoleException":
        case "com.amazonaws.appstream#InvalidRoleException":
            response = {
                ...(await deserializeAws_json1_1InvalidRoleExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "OperationNotPermittedException":
        case "com.amazonaws.appstream#OperationNotPermittedException":
            response = {
                ...(await deserializeAws_json1_1OperationNotPermittedExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceInUseException":
        case "com.amazonaws.appstream#ResourceInUseException":
            response = {
                ...(await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1UpdateFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateFleetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateFleetResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UpdateFleetCommand = deserializeAws_json1_1UpdateFleetCommand;
const deserializeAws_json1_1UpdateFleetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.appstream#ConcurrentModificationException":
            response = {
                ...(await deserializeAws_json1_1ConcurrentModificationExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "IncompatibleImageException":
        case "com.amazonaws.appstream#IncompatibleImageException":
            response = {
                ...(await deserializeAws_json1_1IncompatibleImageExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InvalidAccountStatusException":
        case "com.amazonaws.appstream#InvalidAccountStatusException":
            response = {
                ...(await deserializeAws_json1_1InvalidAccountStatusExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InvalidParameterCombinationException":
        case "com.amazonaws.appstream#InvalidParameterCombinationException":
            response = {
                ...(await deserializeAws_json1_1InvalidParameterCombinationExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InvalidRoleException":
        case "com.amazonaws.appstream#InvalidRoleException":
            response = {
                ...(await deserializeAws_json1_1InvalidRoleExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "LimitExceededException":
        case "com.amazonaws.appstream#LimitExceededException":
            response = {
                ...(await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "OperationNotPermittedException":
        case "com.amazonaws.appstream#OperationNotPermittedException":
            response = {
                ...(await deserializeAws_json1_1OperationNotPermittedExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "RequestLimitExceededException":
        case "com.amazonaws.appstream#RequestLimitExceededException":
            response = {
                ...(await deserializeAws_json1_1RequestLimitExceededExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceInUseException":
        case "com.amazonaws.appstream#ResourceInUseException":
            response = {
                ...(await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotAvailableException":
        case "com.amazonaws.appstream#ResourceNotAvailableException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotAvailableExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1UpdateImagePermissionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateImagePermissionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateImagePermissionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UpdateImagePermissionsCommand = deserializeAws_json1_1UpdateImagePermissionsCommand;
const deserializeAws_json1_1UpdateImagePermissionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "LimitExceededException":
        case "com.amazonaws.appstream#LimitExceededException":
            response = {
                ...(await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotAvailableException":
        case "com.amazonaws.appstream#ResourceNotAvailableException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotAvailableExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1UpdateStackCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateStackCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateStackResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UpdateStackCommand = deserializeAws_json1_1UpdateStackCommand;
const deserializeAws_json1_1UpdateStackCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.appstream#ConcurrentModificationException":
            response = {
                ...(await deserializeAws_json1_1ConcurrentModificationExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "IncompatibleImageException":
        case "com.amazonaws.appstream#IncompatibleImageException":
            response = {
                ...(await deserializeAws_json1_1IncompatibleImageExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InvalidAccountStatusException":
        case "com.amazonaws.appstream#InvalidAccountStatusException":
            response = {
                ...(await deserializeAws_json1_1InvalidAccountStatusExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InvalidParameterCombinationException":
        case "com.amazonaws.appstream#InvalidParameterCombinationException":
            response = {
                ...(await deserializeAws_json1_1InvalidParameterCombinationExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InvalidRoleException":
        case "com.amazonaws.appstream#InvalidRoleException":
            response = {
                ...(await deserializeAws_json1_1InvalidRoleExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "LimitExceededException":
        case "com.amazonaws.appstream#LimitExceededException":
            response = {
                ...(await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "OperationNotPermittedException":
        case "com.amazonaws.appstream#OperationNotPermittedException":
            response = {
                ...(await deserializeAws_json1_1OperationNotPermittedExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceInUseException":
        case "com.amazonaws.appstream#ResourceInUseException":
            response = {
                ...(await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ConcurrentModificationExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ConcurrentModificationException(body, context);
    const contents = {
        name: "ConcurrentModificationException",
        $fault: "client",
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    };
    return contents;
};
const deserializeAws_json1_1IncompatibleImageExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1IncompatibleImageException(body, context);
    const contents = {
        name: "IncompatibleImageException",
        $fault: "client",
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    };
    return contents;
};
const deserializeAws_json1_1InvalidAccountStatusExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InvalidAccountStatusException(body, context);
    const contents = {
        name: "InvalidAccountStatusException",
        $fault: "client",
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    };
    return contents;
};
const deserializeAws_json1_1InvalidParameterCombinationExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InvalidParameterCombinationException(body, context);
    const contents = {
        name: "InvalidParameterCombinationException",
        $fault: "client",
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    };
    return contents;
};
const deserializeAws_json1_1InvalidRoleExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InvalidRoleException(body, context);
    const contents = {
        name: "InvalidRoleException",
        $fault: "client",
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    };
    return contents;
};
const deserializeAws_json1_1LimitExceededExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1LimitExceededException(body, context);
    const contents = {
        name: "LimitExceededException",
        $fault: "client",
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    };
    return contents;
};
const deserializeAws_json1_1OperationNotPermittedExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1OperationNotPermittedException(body, context);
    const contents = {
        name: "OperationNotPermittedException",
        $fault: "client",
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    };
    return contents;
};
const deserializeAws_json1_1RequestLimitExceededExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1RequestLimitExceededException(body, context);
    const contents = {
        name: "RequestLimitExceededException",
        $fault: "client",
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    };
    return contents;
};
const deserializeAws_json1_1ResourceAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ResourceAlreadyExistsException(body, context);
    const contents = {
        name: "ResourceAlreadyExistsException",
        $fault: "client",
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    };
    return contents;
};
const deserializeAws_json1_1ResourceInUseExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ResourceInUseException(body, context);
    const contents = {
        name: "ResourceInUseException",
        $fault: "client",
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    };
    return contents;
};
const deserializeAws_json1_1ResourceNotAvailableExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ResourceNotAvailableException(body, context);
    const contents = {
        name: "ResourceNotAvailableException",
        $fault: "client",
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    };
    return contents;
};
const deserializeAws_json1_1ResourceNotFoundExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ResourceNotFoundException(body, context);
    const contents = {
        name: "ResourceNotFoundException",
        $fault: "client",
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    };
    return contents;
};
const serializeAws_json1_1AccessEndpoint = (input, context) => {
    return {
        ...(input.EndpointType !== undefined && input.EndpointType !== null && { EndpointType: input.EndpointType }),
        ...(input.VpceId !== undefined && input.VpceId !== null && { VpceId: input.VpceId }),
    };
};
const serializeAws_json1_1AccessEndpointList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1AccessEndpoint(entry, context);
    });
};
const serializeAws_json1_1ApplicationAttributes = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1ApplicationSettings = (input, context) => {
    return {
        ...(input.Enabled !== undefined && input.Enabled !== null && { Enabled: input.Enabled }),
        ...(input.SettingsGroup !== undefined && input.SettingsGroup !== null && { SettingsGroup: input.SettingsGroup }),
    };
};
const serializeAws_json1_1ArnList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1AssociateApplicationFleetRequest = (input, context) => {
    return {
        ...(input.ApplicationArn !== undefined &&
            input.ApplicationArn !== null && { ApplicationArn: input.ApplicationArn }),
        ...(input.FleetName !== undefined && input.FleetName !== null && { FleetName: input.FleetName }),
    };
};
const serializeAws_json1_1AssociateFleetRequest = (input, context) => {
    return {
        ...(input.FleetName !== undefined && input.FleetName !== null && { FleetName: input.FleetName }),
        ...(input.StackName !== undefined && input.StackName !== null && { StackName: input.StackName }),
    };
};
const serializeAws_json1_1AwsAccountIdList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1BatchAssociateUserStackRequest = (input, context) => {
    return {
        ...(input.UserStackAssociations !== undefined &&
            input.UserStackAssociations !== null && {
            UserStackAssociations: serializeAws_json1_1UserStackAssociationList(input.UserStackAssociations, context),
        }),
    };
};
const serializeAws_json1_1BatchDisassociateUserStackRequest = (input, context) => {
    return {
        ...(input.UserStackAssociations !== undefined &&
            input.UserStackAssociations !== null && {
            UserStackAssociations: serializeAws_json1_1UserStackAssociationList(input.UserStackAssociations, context),
        }),
    };
};
const serializeAws_json1_1ComputeCapacity = (input, context) => {
    return {
        ...(input.DesiredInstances !== undefined &&
            input.DesiredInstances !== null && { DesiredInstances: input.DesiredInstances }),
    };
};
const serializeAws_json1_1CopyImageRequest = (input, context) => {
    return {
        ...(input.DestinationImageDescription !== undefined &&
            input.DestinationImageDescription !== null && { DestinationImageDescription: input.DestinationImageDescription }),
        ...(input.DestinationImageName !== undefined &&
            input.DestinationImageName !== null && { DestinationImageName: input.DestinationImageName }),
        ...(input.DestinationRegion !== undefined &&
            input.DestinationRegion !== null && { DestinationRegion: input.DestinationRegion }),
        ...(input.SourceImageName !== undefined &&
            input.SourceImageName !== null && { SourceImageName: input.SourceImageName }),
    };
};
const serializeAws_json1_1CreateAppBlockRequest = (input, context) => {
    return {
        ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
        ...(input.DisplayName !== undefined && input.DisplayName !== null && { DisplayName: input.DisplayName }),
        ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
        ...(input.SetupScriptDetails !== undefined &&
            input.SetupScriptDetails !== null && {
            SetupScriptDetails: serializeAws_json1_1ScriptDetails(input.SetupScriptDetails, context),
        }),
        ...(input.SourceS3Location !== undefined &&
            input.SourceS3Location !== null && {
            SourceS3Location: serializeAws_json1_1S3Location(input.SourceS3Location, context),
        }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1Tags(input.Tags, context) }),
    };
};
const serializeAws_json1_1CreateApplicationRequest = (input, context) => {
    return {
        ...(input.AppBlockArn !== undefined && input.AppBlockArn !== null && { AppBlockArn: input.AppBlockArn }),
        ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
        ...(input.DisplayName !== undefined && input.DisplayName !== null && { DisplayName: input.DisplayName }),
        ...(input.IconS3Location !== undefined &&
            input.IconS3Location !== null && {
            IconS3Location: serializeAws_json1_1S3Location(input.IconS3Location, context),
        }),
        ...(input.InstanceFamilies !== undefined &&
            input.InstanceFamilies !== null && {
            InstanceFamilies: serializeAws_json1_1StringList(input.InstanceFamilies, context),
        }),
        ...(input.LaunchParameters !== undefined &&
            input.LaunchParameters !== null && { LaunchParameters: input.LaunchParameters }),
        ...(input.LaunchPath !== undefined && input.LaunchPath !== null && { LaunchPath: input.LaunchPath }),
        ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
        ...(input.Platforms !== undefined &&
            input.Platforms !== null && { Platforms: serializeAws_json1_1Platforms(input.Platforms, context) }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1Tags(input.Tags, context) }),
        ...(input.WorkingDirectory !== undefined &&
            input.WorkingDirectory !== null && { WorkingDirectory: input.WorkingDirectory }),
    };
};
const serializeAws_json1_1CreateDirectoryConfigRequest = (input, context) => {
    return {
        ...(input.DirectoryName !== undefined && input.DirectoryName !== null && { DirectoryName: input.DirectoryName }),
        ...(input.OrganizationalUnitDistinguishedNames !== undefined &&
            input.OrganizationalUnitDistinguishedNames !== null && {
            OrganizationalUnitDistinguishedNames: serializeAws_json1_1OrganizationalUnitDistinguishedNamesList(input.OrganizationalUnitDistinguishedNames, context),
        }),
        ...(input.ServiceAccountCredentials !== undefined &&
            input.ServiceAccountCredentials !== null && {
            ServiceAccountCredentials: serializeAws_json1_1ServiceAccountCredentials(input.ServiceAccountCredentials, context),
        }),
    };
};
const serializeAws_json1_1CreateFleetRequest = (input, context) => {
    return {
        ...(input.ComputeCapacity !== undefined &&
            input.ComputeCapacity !== null && {
            ComputeCapacity: serializeAws_json1_1ComputeCapacity(input.ComputeCapacity, context),
        }),
        ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
        ...(input.DisconnectTimeoutInSeconds !== undefined &&
            input.DisconnectTimeoutInSeconds !== null && { DisconnectTimeoutInSeconds: input.DisconnectTimeoutInSeconds }),
        ...(input.DisplayName !== undefined && input.DisplayName !== null && { DisplayName: input.DisplayName }),
        ...(input.DomainJoinInfo !== undefined &&
            input.DomainJoinInfo !== null && {
            DomainJoinInfo: serializeAws_json1_1DomainJoinInfo(input.DomainJoinInfo, context),
        }),
        ...(input.EnableDefaultInternetAccess !== undefined &&
            input.EnableDefaultInternetAccess !== null && { EnableDefaultInternetAccess: input.EnableDefaultInternetAccess }),
        ...(input.FleetType !== undefined && input.FleetType !== null && { FleetType: input.FleetType }),
        ...(input.IamRoleArn !== undefined && input.IamRoleArn !== null && { IamRoleArn: input.IamRoleArn }),
        ...(input.IdleDisconnectTimeoutInSeconds !== undefined &&
            input.IdleDisconnectTimeoutInSeconds !== null && {
            IdleDisconnectTimeoutInSeconds: input.IdleDisconnectTimeoutInSeconds,
        }),
        ...(input.ImageArn !== undefined && input.ImageArn !== null && { ImageArn: input.ImageArn }),
        ...(input.ImageName !== undefined && input.ImageName !== null && { ImageName: input.ImageName }),
        ...(input.InstanceType !== undefined && input.InstanceType !== null && { InstanceType: input.InstanceType }),
        ...(input.MaxConcurrentSessions !== undefined &&
            input.MaxConcurrentSessions !== null && { MaxConcurrentSessions: input.MaxConcurrentSessions }),
        ...(input.MaxUserDurationInSeconds !== undefined &&
            input.MaxUserDurationInSeconds !== null && { MaxUserDurationInSeconds: input.MaxUserDurationInSeconds }),
        ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
        ...(input.Platform !== undefined && input.Platform !== null && { Platform: input.Platform }),
        ...(input.StreamView !== undefined && input.StreamView !== null && { StreamView: input.StreamView }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1Tags(input.Tags, context) }),
        ...(input.UsbDeviceFilterStrings !== undefined &&
            input.UsbDeviceFilterStrings !== null && {
            UsbDeviceFilterStrings: serializeAws_json1_1UsbDeviceFilterStrings(input.UsbDeviceFilterStrings, context),
        }),
        ...(input.VpcConfig !== undefined &&
            input.VpcConfig !== null && { VpcConfig: serializeAws_json1_1VpcConfig(input.VpcConfig, context) }),
    };
};
const serializeAws_json1_1CreateImageBuilderRequest = (input, context) => {
    return {
        ...(input.AccessEndpoints !== undefined &&
            input.AccessEndpoints !== null && {
            AccessEndpoints: serializeAws_json1_1AccessEndpointList(input.AccessEndpoints, context),
        }),
        ...(input.AppstreamAgentVersion !== undefined &&
            input.AppstreamAgentVersion !== null && { AppstreamAgentVersion: input.AppstreamAgentVersion }),
        ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
        ...(input.DisplayName !== undefined && input.DisplayName !== null && { DisplayName: input.DisplayName }),
        ...(input.DomainJoinInfo !== undefined &&
            input.DomainJoinInfo !== null && {
            DomainJoinInfo: serializeAws_json1_1DomainJoinInfo(input.DomainJoinInfo, context),
        }),
        ...(input.EnableDefaultInternetAccess !== undefined &&
            input.EnableDefaultInternetAccess !== null && { EnableDefaultInternetAccess: input.EnableDefaultInternetAccess }),
        ...(input.IamRoleArn !== undefined && input.IamRoleArn !== null && { IamRoleArn: input.IamRoleArn }),
        ...(input.ImageArn !== undefined && input.ImageArn !== null && { ImageArn: input.ImageArn }),
        ...(input.ImageName !== undefined && input.ImageName !== null && { ImageName: input.ImageName }),
        ...(input.InstanceType !== undefined && input.InstanceType !== null && { InstanceType: input.InstanceType }),
        ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1Tags(input.Tags, context) }),
        ...(input.VpcConfig !== undefined &&
            input.VpcConfig !== null && { VpcConfig: serializeAws_json1_1VpcConfig(input.VpcConfig, context) }),
    };
};
const serializeAws_json1_1CreateImageBuilderStreamingURLRequest = (input, context) => {
    return {
        ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
        ...(input.Validity !== undefined && input.Validity !== null && { Validity: input.Validity }),
    };
};
const serializeAws_json1_1CreateStackRequest = (input, context) => {
    return {
        ...(input.AccessEndpoints !== undefined &&
            input.AccessEndpoints !== null && {
            AccessEndpoints: serializeAws_json1_1AccessEndpointList(input.AccessEndpoints, context),
        }),
        ...(input.ApplicationSettings !== undefined &&
            input.ApplicationSettings !== null && {
            ApplicationSettings: serializeAws_json1_1ApplicationSettings(input.ApplicationSettings, context),
        }),
        ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
        ...(input.DisplayName !== undefined && input.DisplayName !== null && { DisplayName: input.DisplayName }),
        ...(input.EmbedHostDomains !== undefined &&
            input.EmbedHostDomains !== null && {
            EmbedHostDomains: serializeAws_json1_1EmbedHostDomains(input.EmbedHostDomains, context),
        }),
        ...(input.FeedbackURL !== undefined && input.FeedbackURL !== null && { FeedbackURL: input.FeedbackURL }),
        ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
        ...(input.RedirectURL !== undefined && input.RedirectURL !== null && { RedirectURL: input.RedirectURL }),
        ...(input.StorageConnectors !== undefined &&
            input.StorageConnectors !== null && {
            StorageConnectors: serializeAws_json1_1StorageConnectorList(input.StorageConnectors, context),
        }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1Tags(input.Tags, context) }),
        ...(input.UserSettings !== undefined &&
            input.UserSettings !== null && {
            UserSettings: serializeAws_json1_1UserSettingList(input.UserSettings, context),
        }),
    };
};
const serializeAws_json1_1CreateStreamingURLRequest = (input, context) => {
    return {
        ...(input.ApplicationId !== undefined && input.ApplicationId !== null && { ApplicationId: input.ApplicationId }),
        ...(input.FleetName !== undefined && input.FleetName !== null && { FleetName: input.FleetName }),
        ...(input.SessionContext !== undefined &&
            input.SessionContext !== null && { SessionContext: input.SessionContext }),
        ...(input.StackName !== undefined && input.StackName !== null && { StackName: input.StackName }),
        ...(input.UserId !== undefined && input.UserId !== null && { UserId: input.UserId }),
        ...(input.Validity !== undefined && input.Validity !== null && { Validity: input.Validity }),
    };
};
const serializeAws_json1_1CreateUpdatedImageRequest = (input, context) => {
    return {
        ...(input.dryRun !== undefined && input.dryRun !== null && { dryRun: input.dryRun }),
        ...(input.existingImageName !== undefined &&
            input.existingImageName !== null && { existingImageName: input.existingImageName }),
        ...(input.newImageDescription !== undefined &&
            input.newImageDescription !== null && { newImageDescription: input.newImageDescription }),
        ...(input.newImageDisplayName !== undefined &&
            input.newImageDisplayName !== null && { newImageDisplayName: input.newImageDisplayName }),
        ...(input.newImageName !== undefined && input.newImageName !== null && { newImageName: input.newImageName }),
        ...(input.newImageTags !== undefined &&
            input.newImageTags !== null && { newImageTags: serializeAws_json1_1Tags(input.newImageTags, context) }),
    };
};
const serializeAws_json1_1CreateUsageReportSubscriptionRequest = (input, context) => {
    return {};
};
const serializeAws_json1_1CreateUserRequest = (input, context) => {
    return {
        ...(input.AuthenticationType !== undefined &&
            input.AuthenticationType !== null && { AuthenticationType: input.AuthenticationType }),
        ...(input.FirstName !== undefined && input.FirstName !== null && { FirstName: input.FirstName }),
        ...(input.LastName !== undefined && input.LastName !== null && { LastName: input.LastName }),
        ...(input.MessageAction !== undefined && input.MessageAction !== null && { MessageAction: input.MessageAction }),
        ...(input.UserName !== undefined && input.UserName !== null && { UserName: input.UserName }),
    };
};
const serializeAws_json1_1DeleteAppBlockRequest = (input, context) => {
    return {
        ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
    };
};
const serializeAws_json1_1DeleteApplicationRequest = (input, context) => {
    return {
        ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
    };
};
const serializeAws_json1_1DeleteDirectoryConfigRequest = (input, context) => {
    return {
        ...(input.DirectoryName !== undefined && input.DirectoryName !== null && { DirectoryName: input.DirectoryName }),
    };
};
const serializeAws_json1_1DeleteFleetRequest = (input, context) => {
    return {
        ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
    };
};
const serializeAws_json1_1DeleteImageBuilderRequest = (input, context) => {
    return {
        ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
    };
};
const serializeAws_json1_1DeleteImagePermissionsRequest = (input, context) => {
    return {
        ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
        ...(input.SharedAccountId !== undefined &&
            input.SharedAccountId !== null && { SharedAccountId: input.SharedAccountId }),
    };
};
const serializeAws_json1_1DeleteImageRequest = (input, context) => {
    return {
        ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
    };
};
const serializeAws_json1_1DeleteStackRequest = (input, context) => {
    return {
        ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
    };
};
const serializeAws_json1_1DeleteUsageReportSubscriptionRequest = (input, context) => {
    return {};
};
const serializeAws_json1_1DeleteUserRequest = (input, context) => {
    return {
        ...(input.AuthenticationType !== undefined &&
            input.AuthenticationType !== null && { AuthenticationType: input.AuthenticationType }),
        ...(input.UserName !== undefined && input.UserName !== null && { UserName: input.UserName }),
    };
};
const serializeAws_json1_1DescribeAppBlocksRequest = (input, context) => {
    return {
        ...(input.Arns !== undefined && input.Arns !== null && { Arns: serializeAws_json1_1ArnList(input.Arns, context) }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1DescribeApplicationFleetAssociationsRequest = (input, context) => {
    return {
        ...(input.ApplicationArn !== undefined &&
            input.ApplicationArn !== null && { ApplicationArn: input.ApplicationArn }),
        ...(input.FleetName !== undefined && input.FleetName !== null && { FleetName: input.FleetName }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1DescribeApplicationsRequest = (input, context) => {
    return {
        ...(input.Arns !== undefined && input.Arns !== null && { Arns: serializeAws_json1_1ArnList(input.Arns, context) }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1DescribeDirectoryConfigsRequest = (input, context) => {
    return {
        ...(input.DirectoryNames !== undefined &&
            input.DirectoryNames !== null && {
            DirectoryNames: serializeAws_json1_1DirectoryNameList(input.DirectoryNames, context),
        }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1DescribeFleetsRequest = (input, context) => {
    return {
        ...(input.Names !== undefined &&
            input.Names !== null && { Names: serializeAws_json1_1StringList(input.Names, context) }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1DescribeImageBuildersRequest = (input, context) => {
    return {
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.Names !== undefined &&
            input.Names !== null && { Names: serializeAws_json1_1StringList(input.Names, context) }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1DescribeImagePermissionsRequest = (input, context) => {
    return {
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.SharedAwsAccountIds !== undefined &&
            input.SharedAwsAccountIds !== null && {
            SharedAwsAccountIds: serializeAws_json1_1AwsAccountIdList(input.SharedAwsAccountIds, context),
        }),
    };
};
const serializeAws_json1_1DescribeImagesRequest = (input, context) => {
    return {
        ...(input.Arns !== undefined && input.Arns !== null && { Arns: serializeAws_json1_1ArnList(input.Arns, context) }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.Names !== undefined &&
            input.Names !== null && { Names: serializeAws_json1_1StringList(input.Names, context) }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.Type !== undefined && input.Type !== null && { Type: input.Type }),
    };
};
const serializeAws_json1_1DescribeSessionsRequest = (input, context) => {
    return {
        ...(input.AuthenticationType !== undefined &&
            input.AuthenticationType !== null && { AuthenticationType: input.AuthenticationType }),
        ...(input.FleetName !== undefined && input.FleetName !== null && { FleetName: input.FleetName }),
        ...(input.Limit !== undefined && input.Limit !== null && { Limit: input.Limit }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.StackName !== undefined && input.StackName !== null && { StackName: input.StackName }),
        ...(input.UserId !== undefined && input.UserId !== null && { UserId: input.UserId }),
    };
};
const serializeAws_json1_1DescribeStacksRequest = (input, context) => {
    return {
        ...(input.Names !== undefined &&
            input.Names !== null && { Names: serializeAws_json1_1StringList(input.Names, context) }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1DescribeUsageReportSubscriptionsRequest = (input, context) => {
    return {
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1DescribeUsersRequest = (input, context) => {
    return {
        ...(input.AuthenticationType !== undefined &&
            input.AuthenticationType !== null && { AuthenticationType: input.AuthenticationType }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1DescribeUserStackAssociationsRequest = (input, context) => {
    return {
        ...(input.AuthenticationType !== undefined &&
            input.AuthenticationType !== null && { AuthenticationType: input.AuthenticationType }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.StackName !== undefined && input.StackName !== null && { StackName: input.StackName }),
        ...(input.UserName !== undefined && input.UserName !== null && { UserName: input.UserName }),
    };
};
const serializeAws_json1_1DirectoryNameList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1DisableUserRequest = (input, context) => {
    return {
        ...(input.AuthenticationType !== undefined &&
            input.AuthenticationType !== null && { AuthenticationType: input.AuthenticationType }),
        ...(input.UserName !== undefined && input.UserName !== null && { UserName: input.UserName }),
    };
};
const serializeAws_json1_1DisassociateApplicationFleetRequest = (input, context) => {
    return {
        ...(input.ApplicationArn !== undefined &&
            input.ApplicationArn !== null && { ApplicationArn: input.ApplicationArn }),
        ...(input.FleetName !== undefined && input.FleetName !== null && { FleetName: input.FleetName }),
    };
};
const serializeAws_json1_1DisassociateFleetRequest = (input, context) => {
    return {
        ...(input.FleetName !== undefined && input.FleetName !== null && { FleetName: input.FleetName }),
        ...(input.StackName !== undefined && input.StackName !== null && { StackName: input.StackName }),
    };
};
const serializeAws_json1_1DomainJoinInfo = (input, context) => {
    return {
        ...(input.DirectoryName !== undefined && input.DirectoryName !== null && { DirectoryName: input.DirectoryName }),
        ...(input.OrganizationalUnitDistinguishedName !== undefined &&
            input.OrganizationalUnitDistinguishedName !== null && {
            OrganizationalUnitDistinguishedName: input.OrganizationalUnitDistinguishedName,
        }),
    };
};
const serializeAws_json1_1DomainList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1EmbedHostDomains = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1EnableUserRequest = (input, context) => {
    return {
        ...(input.AuthenticationType !== undefined &&
            input.AuthenticationType !== null && { AuthenticationType: input.AuthenticationType }),
        ...(input.UserName !== undefined && input.UserName !== null && { UserName: input.UserName }),
    };
};
const serializeAws_json1_1ExpireSessionRequest = (input, context) => {
    return {
        ...(input.SessionId !== undefined && input.SessionId !== null && { SessionId: input.SessionId }),
    };
};
const serializeAws_json1_1FleetAttributes = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1ImagePermissions = (input, context) => {
    return {
        ...(input.allowFleet !== undefined && input.allowFleet !== null && { allowFleet: input.allowFleet }),
        ...(input.allowImageBuilder !== undefined &&
            input.allowImageBuilder !== null && { allowImageBuilder: input.allowImageBuilder }),
    };
};
const serializeAws_json1_1ListAssociatedFleetsRequest = (input, context) => {
    return {
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.StackName !== undefined && input.StackName !== null && { StackName: input.StackName }),
    };
};
const serializeAws_json1_1ListAssociatedStacksRequest = (input, context) => {
    return {
        ...(input.FleetName !== undefined && input.FleetName !== null && { FleetName: input.FleetName }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1ListTagsForResourceRequest = (input, context) => {
    return {
        ...(input.ResourceArn !== undefined && input.ResourceArn !== null && { ResourceArn: input.ResourceArn }),
    };
};
const serializeAws_json1_1OrganizationalUnitDistinguishedNamesList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1Platforms = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1S3Location = (input, context) => {
    return {
        ...(input.S3Bucket !== undefined && input.S3Bucket !== null && { S3Bucket: input.S3Bucket }),
        ...(input.S3Key !== undefined && input.S3Key !== null && { S3Key: input.S3Key }),
    };
};
const serializeAws_json1_1ScriptDetails = (input, context) => {
    return {
        ...(input.ExecutableParameters !== undefined &&
            input.ExecutableParameters !== null && { ExecutableParameters: input.ExecutableParameters }),
        ...(input.ExecutablePath !== undefined &&
            input.ExecutablePath !== null && { ExecutablePath: input.ExecutablePath }),
        ...(input.ScriptS3Location !== undefined &&
            input.ScriptS3Location !== null && {
            ScriptS3Location: serializeAws_json1_1S3Location(input.ScriptS3Location, context),
        }),
        ...(input.TimeoutInSeconds !== undefined &&
            input.TimeoutInSeconds !== null && { TimeoutInSeconds: input.TimeoutInSeconds }),
    };
};
const serializeAws_json1_1SecurityGroupIdList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1ServiceAccountCredentials = (input, context) => {
    return {
        ...(input.AccountName !== undefined && input.AccountName !== null && { AccountName: input.AccountName }),
        ...(input.AccountPassword !== undefined &&
            input.AccountPassword !== null && { AccountPassword: input.AccountPassword }),
    };
};
const serializeAws_json1_1StackAttributes = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1StartFleetRequest = (input, context) => {
    return {
        ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
    };
};
const serializeAws_json1_1StartImageBuilderRequest = (input, context) => {
    return {
        ...(input.AppstreamAgentVersion !== undefined &&
            input.AppstreamAgentVersion !== null && { AppstreamAgentVersion: input.AppstreamAgentVersion }),
        ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
    };
};
const serializeAws_json1_1StopFleetRequest = (input, context) => {
    return {
        ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
    };
};
const serializeAws_json1_1StopImageBuilderRequest = (input, context) => {
    return {
        ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
    };
};
const serializeAws_json1_1StorageConnector = (input, context) => {
    return {
        ...(input.ConnectorType !== undefined && input.ConnectorType !== null && { ConnectorType: input.ConnectorType }),
        ...(input.Domains !== undefined &&
            input.Domains !== null && { Domains: serializeAws_json1_1DomainList(input.Domains, context) }),
        ...(input.ResourceIdentifier !== undefined &&
            input.ResourceIdentifier !== null && { ResourceIdentifier: input.ResourceIdentifier }),
    };
};
const serializeAws_json1_1StorageConnectorList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1StorageConnector(entry, context);
    });
};
const serializeAws_json1_1StringList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1SubnetIdList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1TagKeyList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1TagResourceRequest = (input, context) => {
    return {
        ...(input.ResourceArn !== undefined && input.ResourceArn !== null && { ResourceArn: input.ResourceArn }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1Tags(input.Tags, context) }),
    };
};
const serializeAws_json1_1Tags = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: value,
        };
    }, {});
};
const serializeAws_json1_1UntagResourceRequest = (input, context) => {
    return {
        ...(input.ResourceArn !== undefined && input.ResourceArn !== null && { ResourceArn: input.ResourceArn }),
        ...(input.TagKeys !== undefined &&
            input.TagKeys !== null && { TagKeys: serializeAws_json1_1TagKeyList(input.TagKeys, context) }),
    };
};
const serializeAws_json1_1UpdateApplicationRequest = (input, context) => {
    return {
        ...(input.AppBlockArn !== undefined && input.AppBlockArn !== null && { AppBlockArn: input.AppBlockArn }),
        ...(input.AttributesToDelete !== undefined &&
            input.AttributesToDelete !== null && {
            AttributesToDelete: serializeAws_json1_1ApplicationAttributes(input.AttributesToDelete, context),
        }),
        ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
        ...(input.DisplayName !== undefined && input.DisplayName !== null && { DisplayName: input.DisplayName }),
        ...(input.IconS3Location !== undefined &&
            input.IconS3Location !== null && {
            IconS3Location: serializeAws_json1_1S3Location(input.IconS3Location, context),
        }),
        ...(input.LaunchParameters !== undefined &&
            input.LaunchParameters !== null && { LaunchParameters: input.LaunchParameters }),
        ...(input.LaunchPath !== undefined && input.LaunchPath !== null && { LaunchPath: input.LaunchPath }),
        ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
        ...(input.WorkingDirectory !== undefined &&
            input.WorkingDirectory !== null && { WorkingDirectory: input.WorkingDirectory }),
    };
};
const serializeAws_json1_1UpdateDirectoryConfigRequest = (input, context) => {
    return {
        ...(input.DirectoryName !== undefined && input.DirectoryName !== null && { DirectoryName: input.DirectoryName }),
        ...(input.OrganizationalUnitDistinguishedNames !== undefined &&
            input.OrganizationalUnitDistinguishedNames !== null && {
            OrganizationalUnitDistinguishedNames: serializeAws_json1_1OrganizationalUnitDistinguishedNamesList(input.OrganizationalUnitDistinguishedNames, context),
        }),
        ...(input.ServiceAccountCredentials !== undefined &&
            input.ServiceAccountCredentials !== null && {
            ServiceAccountCredentials: serializeAws_json1_1ServiceAccountCredentials(input.ServiceAccountCredentials, context),
        }),
    };
};
const serializeAws_json1_1UpdateFleetRequest = (input, context) => {
    return {
        ...(input.AttributesToDelete !== undefined &&
            input.AttributesToDelete !== null && {
            AttributesToDelete: serializeAws_json1_1FleetAttributes(input.AttributesToDelete, context),
        }),
        ...(input.ComputeCapacity !== undefined &&
            input.ComputeCapacity !== null && {
            ComputeCapacity: serializeAws_json1_1ComputeCapacity(input.ComputeCapacity, context),
        }),
        ...(input.DeleteVpcConfig !== undefined &&
            input.DeleteVpcConfig !== null && { DeleteVpcConfig: input.DeleteVpcConfig }),
        ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
        ...(input.DisconnectTimeoutInSeconds !== undefined &&
            input.DisconnectTimeoutInSeconds !== null && { DisconnectTimeoutInSeconds: input.DisconnectTimeoutInSeconds }),
        ...(input.DisplayName !== undefined && input.DisplayName !== null && { DisplayName: input.DisplayName }),
        ...(input.DomainJoinInfo !== undefined &&
            input.DomainJoinInfo !== null && {
            DomainJoinInfo: serializeAws_json1_1DomainJoinInfo(input.DomainJoinInfo, context),
        }),
        ...(input.EnableDefaultInternetAccess !== undefined &&
            input.EnableDefaultInternetAccess !== null && { EnableDefaultInternetAccess: input.EnableDefaultInternetAccess }),
        ...(input.IamRoleArn !== undefined && input.IamRoleArn !== null && { IamRoleArn: input.IamRoleArn }),
        ...(input.IdleDisconnectTimeoutInSeconds !== undefined &&
            input.IdleDisconnectTimeoutInSeconds !== null && {
            IdleDisconnectTimeoutInSeconds: input.IdleDisconnectTimeoutInSeconds,
        }),
        ...(input.ImageArn !== undefined && input.ImageArn !== null && { ImageArn: input.ImageArn }),
        ...(input.ImageName !== undefined && input.ImageName !== null && { ImageName: input.ImageName }),
        ...(input.InstanceType !== undefined && input.InstanceType !== null && { InstanceType: input.InstanceType }),
        ...(input.MaxConcurrentSessions !== undefined &&
            input.MaxConcurrentSessions !== null && { MaxConcurrentSessions: input.MaxConcurrentSessions }),
        ...(input.MaxUserDurationInSeconds !== undefined &&
            input.MaxUserDurationInSeconds !== null && { MaxUserDurationInSeconds: input.MaxUserDurationInSeconds }),
        ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
        ...(input.Platform !== undefined && input.Platform !== null && { Platform: input.Platform }),
        ...(input.StreamView !== undefined && input.StreamView !== null && { StreamView: input.StreamView }),
        ...(input.UsbDeviceFilterStrings !== undefined &&
            input.UsbDeviceFilterStrings !== null && {
            UsbDeviceFilterStrings: serializeAws_json1_1UsbDeviceFilterStrings(input.UsbDeviceFilterStrings, context),
        }),
        ...(input.VpcConfig !== undefined &&
            input.VpcConfig !== null && { VpcConfig: serializeAws_json1_1VpcConfig(input.VpcConfig, context) }),
    };
};
const serializeAws_json1_1UpdateImagePermissionsRequest = (input, context) => {
    return {
        ...(input.ImagePermissions !== undefined &&
            input.ImagePermissions !== null && {
            ImagePermissions: serializeAws_json1_1ImagePermissions(input.ImagePermissions, context),
        }),
        ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
        ...(input.SharedAccountId !== undefined &&
            input.SharedAccountId !== null && { SharedAccountId: input.SharedAccountId }),
    };
};
const serializeAws_json1_1UpdateStackRequest = (input, context) => {
    return {
        ...(input.AccessEndpoints !== undefined &&
            input.AccessEndpoints !== null && {
            AccessEndpoints: serializeAws_json1_1AccessEndpointList(input.AccessEndpoints, context),
        }),
        ...(input.ApplicationSettings !== undefined &&
            input.ApplicationSettings !== null && {
            ApplicationSettings: serializeAws_json1_1ApplicationSettings(input.ApplicationSettings, context),
        }),
        ...(input.AttributesToDelete !== undefined &&
            input.AttributesToDelete !== null && {
            AttributesToDelete: serializeAws_json1_1StackAttributes(input.AttributesToDelete, context),
        }),
        ...(input.DeleteStorageConnectors !== undefined &&
            input.DeleteStorageConnectors !== null && { DeleteStorageConnectors: input.DeleteStorageConnectors }),
        ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
        ...(input.DisplayName !== undefined && input.DisplayName !== null && { DisplayName: input.DisplayName }),
        ...(input.EmbedHostDomains !== undefined &&
            input.EmbedHostDomains !== null && {
            EmbedHostDomains: serializeAws_json1_1EmbedHostDomains(input.EmbedHostDomains, context),
        }),
        ...(input.FeedbackURL !== undefined && input.FeedbackURL !== null && { FeedbackURL: input.FeedbackURL }),
        ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
        ...(input.RedirectURL !== undefined && input.RedirectURL !== null && { RedirectURL: input.RedirectURL }),
        ...(input.StorageConnectors !== undefined &&
            input.StorageConnectors !== null && {
            StorageConnectors: serializeAws_json1_1StorageConnectorList(input.StorageConnectors, context),
        }),
        ...(input.UserSettings !== undefined &&
            input.UserSettings !== null && {
            UserSettings: serializeAws_json1_1UserSettingList(input.UserSettings, context),
        }),
    };
};
const serializeAws_json1_1UsbDeviceFilterStrings = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1UserSetting = (input, context) => {
    return {
        ...(input.Action !== undefined && input.Action !== null && { Action: input.Action }),
        ...(input.Permission !== undefined && input.Permission !== null && { Permission: input.Permission }),
    };
};
const serializeAws_json1_1UserSettingList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1UserSetting(entry, context);
    });
};
const serializeAws_json1_1UserStackAssociation = (input, context) => {
    return {
        ...(input.AuthenticationType !== undefined &&
            input.AuthenticationType !== null && { AuthenticationType: input.AuthenticationType }),
        ...(input.SendEmailNotification !== undefined &&
            input.SendEmailNotification !== null && { SendEmailNotification: input.SendEmailNotification }),
        ...(input.StackName !== undefined && input.StackName !== null && { StackName: input.StackName }),
        ...(input.UserName !== undefined && input.UserName !== null && { UserName: input.UserName }),
    };
};
const serializeAws_json1_1UserStackAssociationList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1UserStackAssociation(entry, context);
    });
};
const serializeAws_json1_1VpcConfig = (input, context) => {
    return {
        ...(input.SecurityGroupIds !== undefined &&
            input.SecurityGroupIds !== null && {
            SecurityGroupIds: serializeAws_json1_1SecurityGroupIdList(input.SecurityGroupIds, context),
        }),
        ...(input.SubnetIds !== undefined &&
            input.SubnetIds !== null && { SubnetIds: serializeAws_json1_1SubnetIdList(input.SubnetIds, context) }),
    };
};
const deserializeAws_json1_1AccessEndpoint = (output, context) => {
    return {
        EndpointType: smithy_client_1.expectString(output.EndpointType),
        VpceId: smithy_client_1.expectString(output.VpceId),
    };
};
const deserializeAws_json1_1AccessEndpointList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1AccessEndpoint(entry, context);
    });
};
const deserializeAws_json1_1AppBlock = (output, context) => {
    return {
        Arn: smithy_client_1.expectString(output.Arn),
        CreatedTime: output.CreatedTime !== undefined && output.CreatedTime !== null
            ? smithy_client_1.expectNonNull(smithy_client_1.parseEpochTimestamp(smithy_client_1.expectNumber(output.CreatedTime)))
            : undefined,
        Description: smithy_client_1.expectString(output.Description),
        DisplayName: smithy_client_1.expectString(output.DisplayName),
        Name: smithy_client_1.expectString(output.Name),
        SetupScriptDetails: output.SetupScriptDetails !== undefined && output.SetupScriptDetails !== null
            ? deserializeAws_json1_1ScriptDetails(output.SetupScriptDetails, context)
            : undefined,
        SourceS3Location: output.SourceS3Location !== undefined && output.SourceS3Location !== null
            ? deserializeAws_json1_1S3Location(output.SourceS3Location, context)
            : undefined,
    };
};
const deserializeAws_json1_1AppBlocks = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1AppBlock(entry, context);
    });
};
const deserializeAws_json1_1Application = (output, context) => {
    return {
        AppBlockArn: smithy_client_1.expectString(output.AppBlockArn),
        Arn: smithy_client_1.expectString(output.Arn),
        CreatedTime: output.CreatedTime !== undefined && output.CreatedTime !== null
            ? smithy_client_1.expectNonNull(smithy_client_1.parseEpochTimestamp(smithy_client_1.expectNumber(output.CreatedTime)))
            : undefined,
        Description: smithy_client_1.expectString(output.Description),
        DisplayName: smithy_client_1.expectString(output.DisplayName),
        Enabled: smithy_client_1.expectBoolean(output.Enabled),
        IconS3Location: output.IconS3Location !== undefined && output.IconS3Location !== null
            ? deserializeAws_json1_1S3Location(output.IconS3Location, context)
            : undefined,
        IconURL: smithy_client_1.expectString(output.IconURL),
        InstanceFamilies: output.InstanceFamilies !== undefined && output.InstanceFamilies !== null
            ? deserializeAws_json1_1StringList(output.InstanceFamilies, context)
            : undefined,
        LaunchParameters: smithy_client_1.expectString(output.LaunchParameters),
        LaunchPath: smithy_client_1.expectString(output.LaunchPath),
        Metadata: output.Metadata !== undefined && output.Metadata !== null
            ? deserializeAws_json1_1Metadata(output.Metadata, context)
            : undefined,
        Name: smithy_client_1.expectString(output.Name),
        Platforms: output.Platforms !== undefined && output.Platforms !== null
            ? deserializeAws_json1_1Platforms(output.Platforms, context)
            : undefined,
        WorkingDirectory: smithy_client_1.expectString(output.WorkingDirectory),
    };
};
const deserializeAws_json1_1ApplicationFleetAssociation = (output, context) => {
    return {
        ApplicationArn: smithy_client_1.expectString(output.ApplicationArn),
        FleetName: smithy_client_1.expectString(output.FleetName),
    };
};
const deserializeAws_json1_1ApplicationFleetAssociationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ApplicationFleetAssociation(entry, context);
    });
};
const deserializeAws_json1_1Applications = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Application(entry, context);
    });
};
const deserializeAws_json1_1ApplicationSettingsResponse = (output, context) => {
    return {
        Enabled: smithy_client_1.expectBoolean(output.Enabled),
        S3BucketName: smithy_client_1.expectString(output.S3BucketName),
        SettingsGroup: smithy_client_1.expectString(output.SettingsGroup),
    };
};
const deserializeAws_json1_1AssociateApplicationFleetResult = (output, context) => {
    return {
        ApplicationFleetAssociation: output.ApplicationFleetAssociation !== undefined && output.ApplicationFleetAssociation !== null
            ? deserializeAws_json1_1ApplicationFleetAssociation(output.ApplicationFleetAssociation, context)
            : undefined,
    };
};
const deserializeAws_json1_1AssociateFleetResult = (output, context) => {
    return {};
};
const deserializeAws_json1_1BatchAssociateUserStackResult = (output, context) => {
    return {
        errors: output.errors !== undefined && output.errors !== null
            ? deserializeAws_json1_1UserStackAssociationErrorList(output.errors, context)
            : undefined,
    };
};
const deserializeAws_json1_1BatchDisassociateUserStackResult = (output, context) => {
    return {
        errors: output.errors !== undefined && output.errors !== null
            ? deserializeAws_json1_1UserStackAssociationErrorList(output.errors, context)
            : undefined,
    };
};
const deserializeAws_json1_1ComputeCapacityStatus = (output, context) => {
    return {
        Available: smithy_client_1.expectInt32(output.Available),
        Desired: smithy_client_1.expectInt32(output.Desired),
        InUse: smithy_client_1.expectInt32(output.InUse),
        Running: smithy_client_1.expectInt32(output.Running),
    };
};
const deserializeAws_json1_1ConcurrentModificationException = (output, context) => {
    return {
        Message: smithy_client_1.expectString(output.Message),
    };
};
const deserializeAws_json1_1CopyImageResponse = (output, context) => {
    return {
        DestinationImageName: smithy_client_1.expectString(output.DestinationImageName),
    };
};
const deserializeAws_json1_1CreateAppBlockResult = (output, context) => {
    return {
        AppBlock: output.AppBlock !== undefined && output.AppBlock !== null
            ? deserializeAws_json1_1AppBlock(output.AppBlock, context)
            : undefined,
    };
};
const deserializeAws_json1_1CreateApplicationResult = (output, context) => {
    return {
        Application: output.Application !== undefined && output.Application !== null
            ? deserializeAws_json1_1Application(output.Application, context)
            : undefined,
    };
};
const deserializeAws_json1_1CreateDirectoryConfigResult = (output, context) => {
    return {
        DirectoryConfig: output.DirectoryConfig !== undefined && output.DirectoryConfig !== null
            ? deserializeAws_json1_1DirectoryConfig(output.DirectoryConfig, context)
            : undefined,
    };
};
const deserializeAws_json1_1CreateFleetResult = (output, context) => {
    return {
        Fleet: output.Fleet !== undefined && output.Fleet !== null
            ? deserializeAws_json1_1Fleet(output.Fleet, context)
            : undefined,
    };
};
const deserializeAws_json1_1CreateImageBuilderResult = (output, context) => {
    return {
        ImageBuilder: output.ImageBuilder !== undefined && output.ImageBuilder !== null
            ? deserializeAws_json1_1ImageBuilder(output.ImageBuilder, context)
            : undefined,
    };
};
const deserializeAws_json1_1CreateImageBuilderStreamingURLResult = (output, context) => {
    return {
        Expires: output.Expires !== undefined && output.Expires !== null
            ? smithy_client_1.expectNonNull(smithy_client_1.parseEpochTimestamp(smithy_client_1.expectNumber(output.Expires)))
            : undefined,
        StreamingURL: smithy_client_1.expectString(output.StreamingURL),
    };
};
const deserializeAws_json1_1CreateStackResult = (output, context) => {
    return {
        Stack: output.Stack !== undefined && output.Stack !== null
            ? deserializeAws_json1_1Stack(output.Stack, context)
            : undefined,
    };
};
const deserializeAws_json1_1CreateStreamingURLResult = (output, context) => {
    return {
        Expires: output.Expires !== undefined && output.Expires !== null
            ? smithy_client_1.expectNonNull(smithy_client_1.parseEpochTimestamp(smithy_client_1.expectNumber(output.Expires)))
            : undefined,
        StreamingURL: smithy_client_1.expectString(output.StreamingURL),
    };
};
const deserializeAws_json1_1CreateUpdatedImageResult = (output, context) => {
    return {
        canUpdateImage: smithy_client_1.expectBoolean(output.canUpdateImage),
        image: output.image !== undefined && output.image !== null
            ? deserializeAws_json1_1Image(output.image, context)
            : undefined,
    };
};
const deserializeAws_json1_1CreateUsageReportSubscriptionResult = (output, context) => {
    return {
        S3BucketName: smithy_client_1.expectString(output.S3BucketName),
        Schedule: smithy_client_1.expectString(output.Schedule),
    };
};
const deserializeAws_json1_1CreateUserResult = (output, context) => {
    return {};
};
const deserializeAws_json1_1DeleteAppBlockResult = (output, context) => {
    return {};
};
const deserializeAws_json1_1DeleteApplicationResult = (output, context) => {
    return {};
};
const deserializeAws_json1_1DeleteDirectoryConfigResult = (output, context) => {
    return {};
};
const deserializeAws_json1_1DeleteFleetResult = (output, context) => {
    return {};
};
const deserializeAws_json1_1DeleteImageBuilderResult = (output, context) => {
    return {
        ImageBuilder: output.ImageBuilder !== undefined && output.ImageBuilder !== null
            ? deserializeAws_json1_1ImageBuilder(output.ImageBuilder, context)
            : undefined,
    };
};
const deserializeAws_json1_1DeleteImagePermissionsResult = (output, context) => {
    return {};
};
const deserializeAws_json1_1DeleteImageResult = (output, context) => {
    return {
        Image: output.Image !== undefined && output.Image !== null
            ? deserializeAws_json1_1Image(output.Image, context)
            : undefined,
    };
};
const deserializeAws_json1_1DeleteStackResult = (output, context) => {
    return {};
};
const deserializeAws_json1_1DeleteUsageReportSubscriptionResult = (output, context) => {
    return {};
};
const deserializeAws_json1_1DeleteUserResult = (output, context) => {
    return {};
};
const deserializeAws_json1_1DescribeAppBlocksResult = (output, context) => {
    return {
        AppBlocks: output.AppBlocks !== undefined && output.AppBlocks !== null
            ? deserializeAws_json1_1AppBlocks(output.AppBlocks, context)
            : undefined,
        NextToken: smithy_client_1.expectString(output.NextToken),
    };
};
const deserializeAws_json1_1DescribeApplicationFleetAssociationsResult = (output, context) => {
    return {
        ApplicationFleetAssociations: output.ApplicationFleetAssociations !== undefined && output.ApplicationFleetAssociations !== null
            ? deserializeAws_json1_1ApplicationFleetAssociationList(output.ApplicationFleetAssociations, context)
            : undefined,
        NextToken: smithy_client_1.expectString(output.NextToken),
    };
};
const deserializeAws_json1_1DescribeApplicationsResult = (output, context) => {
    return {
        Applications: output.Applications !== undefined && output.Applications !== null
            ? deserializeAws_json1_1Applications(output.Applications, context)
            : undefined,
        NextToken: smithy_client_1.expectString(output.NextToken),
    };
};
const deserializeAws_json1_1DescribeDirectoryConfigsResult = (output, context) => {
    return {
        DirectoryConfigs: output.DirectoryConfigs !== undefined && output.DirectoryConfigs !== null
            ? deserializeAws_json1_1DirectoryConfigList(output.DirectoryConfigs, context)
            : undefined,
        NextToken: smithy_client_1.expectString(output.NextToken),
    };
};
const deserializeAws_json1_1DescribeFleetsResult = (output, context) => {
    return {
        Fleets: output.Fleets !== undefined && output.Fleets !== null
            ? deserializeAws_json1_1FleetList(output.Fleets, context)
            : undefined,
        NextToken: smithy_client_1.expectString(output.NextToken),
    };
};
const deserializeAws_json1_1DescribeImageBuildersResult = (output, context) => {
    return {
        ImageBuilders: output.ImageBuilders !== undefined && output.ImageBuilders !== null
            ? deserializeAws_json1_1ImageBuilderList(output.ImageBuilders, context)
            : undefined,
        NextToken: smithy_client_1.expectString(output.NextToken),
    };
};
const deserializeAws_json1_1DescribeImagePermissionsResult = (output, context) => {
    return {
        Name: smithy_client_1.expectString(output.Name),
        NextToken: smithy_client_1.expectString(output.NextToken),
        SharedImagePermissionsList: output.SharedImagePermissionsList !== undefined && output.SharedImagePermissionsList !== null
            ? deserializeAws_json1_1SharedImagePermissionsList(output.SharedImagePermissionsList, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeImagesResult = (output, context) => {
    return {
        Images: output.Images !== undefined && output.Images !== null
            ? deserializeAws_json1_1ImageList(output.Images, context)
            : undefined,
        NextToken: smithy_client_1.expectString(output.NextToken),
    };
};
const deserializeAws_json1_1DescribeSessionsResult = (output, context) => {
    return {
        NextToken: smithy_client_1.expectString(output.NextToken),
        Sessions: output.Sessions !== undefined && output.Sessions !== null
            ? deserializeAws_json1_1SessionList(output.Sessions, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeStacksResult = (output, context) => {
    return {
        NextToken: smithy_client_1.expectString(output.NextToken),
        Stacks: output.Stacks !== undefined && output.Stacks !== null
            ? deserializeAws_json1_1StackList(output.Stacks, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeUsageReportSubscriptionsResult = (output, context) => {
    return {
        NextToken: smithy_client_1.expectString(output.NextToken),
        UsageReportSubscriptions: output.UsageReportSubscriptions !== undefined && output.UsageReportSubscriptions !== null
            ? deserializeAws_json1_1UsageReportSubscriptionList(output.UsageReportSubscriptions, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeUsersResult = (output, context) => {
    return {
        NextToken: smithy_client_1.expectString(output.NextToken),
        Users: output.Users !== undefined && output.Users !== null
            ? deserializeAws_json1_1UserList(output.Users, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeUserStackAssociationsResult = (output, context) => {
    return {
        NextToken: smithy_client_1.expectString(output.NextToken),
        UserStackAssociations: output.UserStackAssociations !== undefined && output.UserStackAssociations !== null
            ? deserializeAws_json1_1UserStackAssociationList(output.UserStackAssociations, context)
            : undefined,
    };
};
const deserializeAws_json1_1DirectoryConfig = (output, context) => {
    return {
        CreatedTime: output.CreatedTime !== undefined && output.CreatedTime !== null
            ? smithy_client_1.expectNonNull(smithy_client_1.parseEpochTimestamp(smithy_client_1.expectNumber(output.CreatedTime)))
            : undefined,
        DirectoryName: smithy_client_1.expectString(output.DirectoryName),
        OrganizationalUnitDistinguishedNames: output.OrganizationalUnitDistinguishedNames !== undefined && output.OrganizationalUnitDistinguishedNames !== null
            ? deserializeAws_json1_1OrganizationalUnitDistinguishedNamesList(output.OrganizationalUnitDistinguishedNames, context)
            : undefined,
        ServiceAccountCredentials: output.ServiceAccountCredentials !== undefined && output.ServiceAccountCredentials !== null
            ? deserializeAws_json1_1ServiceAccountCredentials(output.ServiceAccountCredentials, context)
            : undefined,
    };
};
const deserializeAws_json1_1DirectoryConfigList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1DirectoryConfig(entry, context);
    });
};
const deserializeAws_json1_1DisableUserResult = (output, context) => {
    return {};
};
const deserializeAws_json1_1DisassociateApplicationFleetResult = (output, context) => {
    return {};
};
const deserializeAws_json1_1DisassociateFleetResult = (output, context) => {
    return {};
};
const deserializeAws_json1_1DomainJoinInfo = (output, context) => {
    return {
        DirectoryName: smithy_client_1.expectString(output.DirectoryName),
        OrganizationalUnitDistinguishedName: smithy_client_1.expectString(output.OrganizationalUnitDistinguishedName),
    };
};
const deserializeAws_json1_1DomainList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return smithy_client_1.expectString(entry);
    });
};
const deserializeAws_json1_1EmbedHostDomains = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return smithy_client_1.expectString(entry);
    });
};
const deserializeAws_json1_1EnableUserResult = (output, context) => {
    return {};
};
const deserializeAws_json1_1ExpireSessionResult = (output, context) => {
    return {};
};
const deserializeAws_json1_1Fleet = (output, context) => {
    return {
        Arn: smithy_client_1.expectString(output.Arn),
        ComputeCapacityStatus: output.ComputeCapacityStatus !== undefined && output.ComputeCapacityStatus !== null
            ? deserializeAws_json1_1ComputeCapacityStatus(output.ComputeCapacityStatus, context)
            : undefined,
        CreatedTime: output.CreatedTime !== undefined && output.CreatedTime !== null
            ? smithy_client_1.expectNonNull(smithy_client_1.parseEpochTimestamp(smithy_client_1.expectNumber(output.CreatedTime)))
            : undefined,
        Description: smithy_client_1.expectString(output.Description),
        DisconnectTimeoutInSeconds: smithy_client_1.expectInt32(output.DisconnectTimeoutInSeconds),
        DisplayName: smithy_client_1.expectString(output.DisplayName),
        DomainJoinInfo: output.DomainJoinInfo !== undefined && output.DomainJoinInfo !== null
            ? deserializeAws_json1_1DomainJoinInfo(output.DomainJoinInfo, context)
            : undefined,
        EnableDefaultInternetAccess: smithy_client_1.expectBoolean(output.EnableDefaultInternetAccess),
        FleetErrors: output.FleetErrors !== undefined && output.FleetErrors !== null
            ? deserializeAws_json1_1FleetErrors(output.FleetErrors, context)
            : undefined,
        FleetType: smithy_client_1.expectString(output.FleetType),
        IamRoleArn: smithy_client_1.expectString(output.IamRoleArn),
        IdleDisconnectTimeoutInSeconds: smithy_client_1.expectInt32(output.IdleDisconnectTimeoutInSeconds),
        ImageArn: smithy_client_1.expectString(output.ImageArn),
        ImageName: smithy_client_1.expectString(output.ImageName),
        InstanceType: smithy_client_1.expectString(output.InstanceType),
        MaxConcurrentSessions: smithy_client_1.expectInt32(output.MaxConcurrentSessions),
        MaxUserDurationInSeconds: smithy_client_1.expectInt32(output.MaxUserDurationInSeconds),
        Name: smithy_client_1.expectString(output.Name),
        Platform: smithy_client_1.expectString(output.Platform),
        State: smithy_client_1.expectString(output.State),
        StreamView: smithy_client_1.expectString(output.StreamView),
        UsbDeviceFilterStrings: output.UsbDeviceFilterStrings !== undefined && output.UsbDeviceFilterStrings !== null
            ? deserializeAws_json1_1UsbDeviceFilterStrings(output.UsbDeviceFilterStrings, context)
            : undefined,
        VpcConfig: output.VpcConfig !== undefined && output.VpcConfig !== null
            ? deserializeAws_json1_1VpcConfig(output.VpcConfig, context)
            : undefined,
    };
};
const deserializeAws_json1_1FleetError = (output, context) => {
    return {
        ErrorCode: smithy_client_1.expectString(output.ErrorCode),
        ErrorMessage: smithy_client_1.expectString(output.ErrorMessage),
    };
};
const deserializeAws_json1_1FleetErrors = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1FleetError(entry, context);
    });
};
const deserializeAws_json1_1FleetList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Fleet(entry, context);
    });
};
const deserializeAws_json1_1Image = (output, context) => {
    return {
        Applications: output.Applications !== undefined && output.Applications !== null
            ? deserializeAws_json1_1Applications(output.Applications, context)
            : undefined,
        AppstreamAgentVersion: smithy_client_1.expectString(output.AppstreamAgentVersion),
        Arn: smithy_client_1.expectString(output.Arn),
        BaseImageArn: smithy_client_1.expectString(output.BaseImageArn),
        CreatedTime: output.CreatedTime !== undefined && output.CreatedTime !== null
            ? smithy_client_1.expectNonNull(smithy_client_1.parseEpochTimestamp(smithy_client_1.expectNumber(output.CreatedTime)))
            : undefined,
        Description: smithy_client_1.expectString(output.Description),
        DisplayName: smithy_client_1.expectString(output.DisplayName),
        ImageBuilderName: smithy_client_1.expectString(output.ImageBuilderName),
        ImageBuilderSupported: smithy_client_1.expectBoolean(output.ImageBuilderSupported),
        ImageErrors: output.ImageErrors !== undefined && output.ImageErrors !== null
            ? deserializeAws_json1_1ResourceErrors(output.ImageErrors, context)
            : undefined,
        ImagePermissions: output.ImagePermissions !== undefined && output.ImagePermissions !== null
            ? deserializeAws_json1_1ImagePermissions(output.ImagePermissions, context)
            : undefined,
        Name: smithy_client_1.expectString(output.Name),
        Platform: smithy_client_1.expectString(output.Platform),
        PublicBaseImageReleasedDate: output.PublicBaseImageReleasedDate !== undefined && output.PublicBaseImageReleasedDate !== null
            ? smithy_client_1.expectNonNull(smithy_client_1.parseEpochTimestamp(smithy_client_1.expectNumber(output.PublicBaseImageReleasedDate)))
            : undefined,
        State: smithy_client_1.expectString(output.State),
        StateChangeReason: output.StateChangeReason !== undefined && output.StateChangeReason !== null
            ? deserializeAws_json1_1ImageStateChangeReason(output.StateChangeReason, context)
            : undefined,
        Visibility: smithy_client_1.expectString(output.Visibility),
    };
};
const deserializeAws_json1_1ImageBuilder = (output, context) => {
    return {
        AccessEndpoints: output.AccessEndpoints !== undefined && output.AccessEndpoints !== null
            ? deserializeAws_json1_1AccessEndpointList(output.AccessEndpoints, context)
            : undefined,
        AppstreamAgentVersion: smithy_client_1.expectString(output.AppstreamAgentVersion),
        Arn: smithy_client_1.expectString(output.Arn),
        CreatedTime: output.CreatedTime !== undefined && output.CreatedTime !== null
            ? smithy_client_1.expectNonNull(smithy_client_1.parseEpochTimestamp(smithy_client_1.expectNumber(output.CreatedTime)))
            : undefined,
        Description: smithy_client_1.expectString(output.Description),
        DisplayName: smithy_client_1.expectString(output.DisplayName),
        DomainJoinInfo: output.DomainJoinInfo !== undefined && output.DomainJoinInfo !== null
            ? deserializeAws_json1_1DomainJoinInfo(output.DomainJoinInfo, context)
            : undefined,
        EnableDefaultInternetAccess: smithy_client_1.expectBoolean(output.EnableDefaultInternetAccess),
        IamRoleArn: smithy_client_1.expectString(output.IamRoleArn),
        ImageArn: smithy_client_1.expectString(output.ImageArn),
        ImageBuilderErrors: output.ImageBuilderErrors !== undefined && output.ImageBuilderErrors !== null
            ? deserializeAws_json1_1ResourceErrors(output.ImageBuilderErrors, context)
            : undefined,
        InstanceType: smithy_client_1.expectString(output.InstanceType),
        Name: smithy_client_1.expectString(output.Name),
        NetworkAccessConfiguration: output.NetworkAccessConfiguration !== undefined && output.NetworkAccessConfiguration !== null
            ? deserializeAws_json1_1NetworkAccessConfiguration(output.NetworkAccessConfiguration, context)
            : undefined,
        Platform: smithy_client_1.expectString(output.Platform),
        State: smithy_client_1.expectString(output.State),
        StateChangeReason: output.StateChangeReason !== undefined && output.StateChangeReason !== null
            ? deserializeAws_json1_1ImageBuilderStateChangeReason(output.StateChangeReason, context)
            : undefined,
        VpcConfig: output.VpcConfig !== undefined && output.VpcConfig !== null
            ? deserializeAws_json1_1VpcConfig(output.VpcConfig, context)
            : undefined,
    };
};
const deserializeAws_json1_1ImageBuilderList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ImageBuilder(entry, context);
    });
};
const deserializeAws_json1_1ImageBuilderStateChangeReason = (output, context) => {
    return {
        Code: smithy_client_1.expectString(output.Code),
        Message: smithy_client_1.expectString(output.Message),
    };
};
const deserializeAws_json1_1ImageList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Image(entry, context);
    });
};
const deserializeAws_json1_1ImagePermissions = (output, context) => {
    return {
        allowFleet: smithy_client_1.expectBoolean(output.allowFleet),
        allowImageBuilder: smithy_client_1.expectBoolean(output.allowImageBuilder),
    };
};
const deserializeAws_json1_1ImageStateChangeReason = (output, context) => {
    return {
        Code: smithy_client_1.expectString(output.Code),
        Message: smithy_client_1.expectString(output.Message),
    };
};
const deserializeAws_json1_1IncompatibleImageException = (output, context) => {
    return {
        Message: smithy_client_1.expectString(output.Message),
    };
};
const deserializeAws_json1_1InvalidAccountStatusException = (output, context) => {
    return {
        Message: smithy_client_1.expectString(output.Message),
    };
};
const deserializeAws_json1_1InvalidParameterCombinationException = (output, context) => {
    return {
        Message: smithy_client_1.expectString(output.Message),
    };
};
const deserializeAws_json1_1InvalidRoleException = (output, context) => {
    return {
        Message: smithy_client_1.expectString(output.Message),
    };
};
const deserializeAws_json1_1LastReportGenerationExecutionError = (output, context) => {
    return {
        ErrorCode: smithy_client_1.expectString(output.ErrorCode),
        ErrorMessage: smithy_client_1.expectString(output.ErrorMessage),
    };
};
const deserializeAws_json1_1LastReportGenerationExecutionErrors = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1LastReportGenerationExecutionError(entry, context);
    });
};
const deserializeAws_json1_1LimitExceededException = (output, context) => {
    return {
        Message: smithy_client_1.expectString(output.Message),
    };
};
const deserializeAws_json1_1ListAssociatedFleetsResult = (output, context) => {
    return {
        Names: output.Names !== undefined && output.Names !== null
            ? deserializeAws_json1_1StringList(output.Names, context)
            : undefined,
        NextToken: smithy_client_1.expectString(output.NextToken),
    };
};
const deserializeAws_json1_1ListAssociatedStacksResult = (output, context) => {
    return {
        Names: output.Names !== undefined && output.Names !== null
            ? deserializeAws_json1_1StringList(output.Names, context)
            : undefined,
        NextToken: smithy_client_1.expectString(output.NextToken),
    };
};
const deserializeAws_json1_1ListTagsForResourceResponse = (output, context) => {
    return {
        Tags: output.Tags !== undefined && output.Tags !== null ? deserializeAws_json1_1Tags(output.Tags, context) : undefined,
    };
};
const deserializeAws_json1_1Metadata = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: smithy_client_1.expectString(value),
        };
    }, {});
};
const deserializeAws_json1_1NetworkAccessConfiguration = (output, context) => {
    return {
        EniId: smithy_client_1.expectString(output.EniId),
        EniPrivateIpAddress: smithy_client_1.expectString(output.EniPrivateIpAddress),
    };
};
const deserializeAws_json1_1OperationNotPermittedException = (output, context) => {
    return {
        Message: smithy_client_1.expectString(output.Message),
    };
};
const deserializeAws_json1_1OrganizationalUnitDistinguishedNamesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return smithy_client_1.expectString(entry);
    });
};
const deserializeAws_json1_1Platforms = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return smithy_client_1.expectString(entry);
    });
};
const deserializeAws_json1_1RequestLimitExceededException = (output, context) => {
    return {
        Message: smithy_client_1.expectString(output.Message),
    };
};
const deserializeAws_json1_1ResourceAlreadyExistsException = (output, context) => {
    return {
        Message: smithy_client_1.expectString(output.Message),
    };
};
const deserializeAws_json1_1ResourceError = (output, context) => {
    return {
        ErrorCode: smithy_client_1.expectString(output.ErrorCode),
        ErrorMessage: smithy_client_1.expectString(output.ErrorMessage),
        ErrorTimestamp: output.ErrorTimestamp !== undefined && output.ErrorTimestamp !== null
            ? smithy_client_1.expectNonNull(smithy_client_1.parseEpochTimestamp(smithy_client_1.expectNumber(output.ErrorTimestamp)))
            : undefined,
    };
};
const deserializeAws_json1_1ResourceErrors = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ResourceError(entry, context);
    });
};
const deserializeAws_json1_1ResourceInUseException = (output, context) => {
    return {
        Message: smithy_client_1.expectString(output.Message),
    };
};
const deserializeAws_json1_1ResourceNotAvailableException = (output, context) => {
    return {
        Message: smithy_client_1.expectString(output.Message),
    };
};
const deserializeAws_json1_1ResourceNotFoundException = (output, context) => {
    return {
        Message: smithy_client_1.expectString(output.Message),
    };
};
const deserializeAws_json1_1S3Location = (output, context) => {
    return {
        S3Bucket: smithy_client_1.expectString(output.S3Bucket),
        S3Key: smithy_client_1.expectString(output.S3Key),
    };
};
const deserializeAws_json1_1ScriptDetails = (output, context) => {
    return {
        ExecutableParameters: smithy_client_1.expectString(output.ExecutableParameters),
        ExecutablePath: smithy_client_1.expectString(output.ExecutablePath),
        ScriptS3Location: output.ScriptS3Location !== undefined && output.ScriptS3Location !== null
            ? deserializeAws_json1_1S3Location(output.ScriptS3Location, context)
            : undefined,
        TimeoutInSeconds: smithy_client_1.expectInt32(output.TimeoutInSeconds),
    };
};
const deserializeAws_json1_1SecurityGroupIdList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return smithy_client_1.expectString(entry);
    });
};
const deserializeAws_json1_1ServiceAccountCredentials = (output, context) => {
    return {
        AccountName: smithy_client_1.expectString(output.AccountName),
        AccountPassword: smithy_client_1.expectString(output.AccountPassword),
    };
};
const deserializeAws_json1_1Session = (output, context) => {
    return {
        AuthenticationType: smithy_client_1.expectString(output.AuthenticationType),
        ConnectionState: smithy_client_1.expectString(output.ConnectionState),
        FleetName: smithy_client_1.expectString(output.FleetName),
        Id: smithy_client_1.expectString(output.Id),
        MaxExpirationTime: output.MaxExpirationTime !== undefined && output.MaxExpirationTime !== null
            ? smithy_client_1.expectNonNull(smithy_client_1.parseEpochTimestamp(smithy_client_1.expectNumber(output.MaxExpirationTime)))
            : undefined,
        NetworkAccessConfiguration: output.NetworkAccessConfiguration !== undefined && output.NetworkAccessConfiguration !== null
            ? deserializeAws_json1_1NetworkAccessConfiguration(output.NetworkAccessConfiguration, context)
            : undefined,
        StackName: smithy_client_1.expectString(output.StackName),
        StartTime: output.StartTime !== undefined && output.StartTime !== null
            ? smithy_client_1.expectNonNull(smithy_client_1.parseEpochTimestamp(smithy_client_1.expectNumber(output.StartTime)))
            : undefined,
        State: smithy_client_1.expectString(output.State),
        UserId: smithy_client_1.expectString(output.UserId),
    };
};
const deserializeAws_json1_1SessionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Session(entry, context);
    });
};
const deserializeAws_json1_1SharedImagePermissions = (output, context) => {
    return {
        imagePermissions: output.imagePermissions !== undefined && output.imagePermissions !== null
            ? deserializeAws_json1_1ImagePermissions(output.imagePermissions, context)
            : undefined,
        sharedAccountId: smithy_client_1.expectString(output.sharedAccountId),
    };
};
const deserializeAws_json1_1SharedImagePermissionsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1SharedImagePermissions(entry, context);
    });
};
const deserializeAws_json1_1Stack = (output, context) => {
    return {
        AccessEndpoints: output.AccessEndpoints !== undefined && output.AccessEndpoints !== null
            ? deserializeAws_json1_1AccessEndpointList(output.AccessEndpoints, context)
            : undefined,
        ApplicationSettings: output.ApplicationSettings !== undefined && output.ApplicationSettings !== null
            ? deserializeAws_json1_1ApplicationSettingsResponse(output.ApplicationSettings, context)
            : undefined,
        Arn: smithy_client_1.expectString(output.Arn),
        CreatedTime: output.CreatedTime !== undefined && output.CreatedTime !== null
            ? smithy_client_1.expectNonNull(smithy_client_1.parseEpochTimestamp(smithy_client_1.expectNumber(output.CreatedTime)))
            : undefined,
        Description: smithy_client_1.expectString(output.Description),
        DisplayName: smithy_client_1.expectString(output.DisplayName),
        EmbedHostDomains: output.EmbedHostDomains !== undefined && output.EmbedHostDomains !== null
            ? deserializeAws_json1_1EmbedHostDomains(output.EmbedHostDomains, context)
            : undefined,
        FeedbackURL: smithy_client_1.expectString(output.FeedbackURL),
        Name: smithy_client_1.expectString(output.Name),
        RedirectURL: smithy_client_1.expectString(output.RedirectURL),
        StackErrors: output.StackErrors !== undefined && output.StackErrors !== null
            ? deserializeAws_json1_1StackErrors(output.StackErrors, context)
            : undefined,
        StorageConnectors: output.StorageConnectors !== undefined && output.StorageConnectors !== null
            ? deserializeAws_json1_1StorageConnectorList(output.StorageConnectors, context)
            : undefined,
        UserSettings: output.UserSettings !== undefined && output.UserSettings !== null
            ? deserializeAws_json1_1UserSettingList(output.UserSettings, context)
            : undefined,
    };
};
const deserializeAws_json1_1StackError = (output, context) => {
    return {
        ErrorCode: smithy_client_1.expectString(output.ErrorCode),
        ErrorMessage: smithy_client_1.expectString(output.ErrorMessage),
    };
};
const deserializeAws_json1_1StackErrors = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1StackError(entry, context);
    });
};
const deserializeAws_json1_1StackList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Stack(entry, context);
    });
};
const deserializeAws_json1_1StartFleetResult = (output, context) => {
    return {};
};
const deserializeAws_json1_1StartImageBuilderResult = (output, context) => {
    return {
        ImageBuilder: output.ImageBuilder !== undefined && output.ImageBuilder !== null
            ? deserializeAws_json1_1ImageBuilder(output.ImageBuilder, context)
            : undefined,
    };
};
const deserializeAws_json1_1StopFleetResult = (output, context) => {
    return {};
};
const deserializeAws_json1_1StopImageBuilderResult = (output, context) => {
    return {
        ImageBuilder: output.ImageBuilder !== undefined && output.ImageBuilder !== null
            ? deserializeAws_json1_1ImageBuilder(output.ImageBuilder, context)
            : undefined,
    };
};
const deserializeAws_json1_1StorageConnector = (output, context) => {
    return {
        ConnectorType: smithy_client_1.expectString(output.ConnectorType),
        Domains: output.Domains !== undefined && output.Domains !== null
            ? deserializeAws_json1_1DomainList(output.Domains, context)
            : undefined,
        ResourceIdentifier: smithy_client_1.expectString(output.ResourceIdentifier),
    };
};
const deserializeAws_json1_1StorageConnectorList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1StorageConnector(entry, context);
    });
};
const deserializeAws_json1_1StringList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return smithy_client_1.expectString(entry);
    });
};
const deserializeAws_json1_1SubnetIdList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return smithy_client_1.expectString(entry);
    });
};
const deserializeAws_json1_1TagResourceResponse = (output, context) => {
    return {};
};
const deserializeAws_json1_1Tags = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: smithy_client_1.expectString(value),
        };
    }, {});
};
const deserializeAws_json1_1UntagResourceResponse = (output, context) => {
    return {};
};
const deserializeAws_json1_1UpdateApplicationResult = (output, context) => {
    return {
        Application: output.Application !== undefined && output.Application !== null
            ? deserializeAws_json1_1Application(output.Application, context)
            : undefined,
    };
};
const deserializeAws_json1_1UpdateDirectoryConfigResult = (output, context) => {
    return {
        DirectoryConfig: output.DirectoryConfig !== undefined && output.DirectoryConfig !== null
            ? deserializeAws_json1_1DirectoryConfig(output.DirectoryConfig, context)
            : undefined,
    };
};
const deserializeAws_json1_1UpdateFleetResult = (output, context) => {
    return {
        Fleet: output.Fleet !== undefined && output.Fleet !== null
            ? deserializeAws_json1_1Fleet(output.Fleet, context)
            : undefined,
    };
};
const deserializeAws_json1_1UpdateImagePermissionsResult = (output, context) => {
    return {};
};
const deserializeAws_json1_1UpdateStackResult = (output, context) => {
    return {
        Stack: output.Stack !== undefined && output.Stack !== null
            ? deserializeAws_json1_1Stack(output.Stack, context)
            : undefined,
    };
};
const deserializeAws_json1_1UsageReportSubscription = (output, context) => {
    return {
        LastGeneratedReportDate: output.LastGeneratedReportDate !== undefined && output.LastGeneratedReportDate !== null
            ? smithy_client_1.expectNonNull(smithy_client_1.parseEpochTimestamp(smithy_client_1.expectNumber(output.LastGeneratedReportDate)))
            : undefined,
        S3BucketName: smithy_client_1.expectString(output.S3BucketName),
        Schedule: smithy_client_1.expectString(output.Schedule),
        SubscriptionErrors: output.SubscriptionErrors !== undefined && output.SubscriptionErrors !== null
            ? deserializeAws_json1_1LastReportGenerationExecutionErrors(output.SubscriptionErrors, context)
            : undefined,
    };
};
const deserializeAws_json1_1UsageReportSubscriptionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1UsageReportSubscription(entry, context);
    });
};
const deserializeAws_json1_1UsbDeviceFilterStrings = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return smithy_client_1.expectString(entry);
    });
};
const deserializeAws_json1_1User = (output, context) => {
    return {
        Arn: smithy_client_1.expectString(output.Arn),
        AuthenticationType: smithy_client_1.expectString(output.AuthenticationType),
        CreatedTime: output.CreatedTime !== undefined && output.CreatedTime !== null
            ? smithy_client_1.expectNonNull(smithy_client_1.parseEpochTimestamp(smithy_client_1.expectNumber(output.CreatedTime)))
            : undefined,
        Enabled: smithy_client_1.expectBoolean(output.Enabled),
        FirstName: smithy_client_1.expectString(output.FirstName),
        LastName: smithy_client_1.expectString(output.LastName),
        Status: smithy_client_1.expectString(output.Status),
        UserName: smithy_client_1.expectString(output.UserName),
    };
};
const deserializeAws_json1_1UserList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1User(entry, context);
    });
};
const deserializeAws_json1_1UserSetting = (output, context) => {
    return {
        Action: smithy_client_1.expectString(output.Action),
        Permission: smithy_client_1.expectString(output.Permission),
    };
};
const deserializeAws_json1_1UserSettingList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1UserSetting(entry, context);
    });
};
const deserializeAws_json1_1UserStackAssociation = (output, context) => {
    return {
        AuthenticationType: smithy_client_1.expectString(output.AuthenticationType),
        SendEmailNotification: smithy_client_1.expectBoolean(output.SendEmailNotification),
        StackName: smithy_client_1.expectString(output.StackName),
        UserName: smithy_client_1.expectString(output.UserName),
    };
};
const deserializeAws_json1_1UserStackAssociationError = (output, context) => {
    return {
        ErrorCode: smithy_client_1.expectString(output.ErrorCode),
        ErrorMessage: smithy_client_1.expectString(output.ErrorMessage),
        UserStackAssociation: output.UserStackAssociation !== undefined && output.UserStackAssociation !== null
            ? deserializeAws_json1_1UserStackAssociation(output.UserStackAssociation, context)
            : undefined,
    };
};
const deserializeAws_json1_1UserStackAssociationErrorList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1UserStackAssociationError(entry, context);
    });
};
const deserializeAws_json1_1UserStackAssociationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1UserStackAssociation(entry, context);
    });
};
const deserializeAws_json1_1VpcConfig = (output, context) => {
    return {
        SecurityGroupIds: output.SecurityGroupIds !== undefined && output.SecurityGroupIds !== null
            ? deserializeAws_json1_1SecurityGroupIdList(output.SecurityGroupIds, context)
            : undefined,
        SubnetIds: output.SubnetIds !== undefined && output.SubnetIds !== null
            ? deserializeAws_json1_1SubnetIdList(output.SubnetIds, context)
            : undefined,
    };
};
const deserializeMetadata = (output) => {
    var _a;
    return ({
        httpStatusCode: output.statusCode,
        requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"],
    });
};
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocol_http_1.HttpRequest(contents);
};
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
    return "";
};
